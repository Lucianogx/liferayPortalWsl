/**
 * SPDX-FileCopyrightText: Â© 2019 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: BSD-3-Clause
 */
import { InternalDispatch } from '@clayui/shared';
import React from 'react';
import type { ICollectionProps } from '@clayui/core';
declare type Messages = {
    loading: string;
    notFound: string;
};
export interface IProps<T> extends Omit<React.HTMLAttributes<HTMLInputElement>, 'onChange' | 'children'>, Omit<Partial<ICollectionProps<T, unknown>>, 'virtualize'> {
    /**
     * Flag to indicate if menu is showing or not.
     */
    active?: boolean;
    /**
     * Flag to align the DropDown menu within the viewport.
     */
    alignmentByViewport?: boolean;
    /**
     * Autocomplete container reference.
     * @ignore
     */
    containerElementRef: React.MutableRefObject<HTMLElement | null>;
    /**
     * The initial value of the active state (uncontrolled).
     */
    defaultActive?: boolean;
    /**
     * The initial value of the input (uncontrolled).
     */
    defaultValue?: string;
    /**
     * Defines the name of the property key that is used in the items filter
     * test (Dynamic content).
     */
    filterKey?: string;
    /**
     * Property to set the initial value of `items` (uncontrolled).
     */
    defaultItems?: Array<T>;
    /**
     * Messages for autocomplete.
     */
    messages?: Messages;
    /**
     * Callback for when the active state changes (controlled).
     */
    onActiveChange?: InternalDispatch<boolean>;
    /**
     * Callback called when input value changes (controlled).
     */
    onChange?: InternalDispatch<string>;
    /**
     * Callback called when items change (controlled).
     */
    onItemsChange?: InternalDispatch<Array<T>>;
    /**
     * Callback is called when more items need to be loaded when the scroll
     * reaches the bottom.
     */
    onLoadMore?: () => Promise<any> | null;
    /**
     * The current value of the input (controlled).
     */
    value?: string;
    /**
     * The interaction required to display the menu.
     */
    menuTrigger?: 'input' | 'focus';
    /**
     * The current state of Autocomplete current loading. Determines whether the
     * loading indicator should be shown or not.
     */
    loadingState?: number;
}
export declare function Autocomplete<T extends Record<string, any>>({ active: externalActive, alignmentByViewport, children, containerElementRef, defaultActive, defaultItems, defaultValue, filterKey, items: externalItems, loadingState, menuTrigger, messages, onActiveChange, onChange, onItemsChange, onLoadMore, value: externalValue, ...otherProps }: IProps<T>): JSX.Element;
export {};
