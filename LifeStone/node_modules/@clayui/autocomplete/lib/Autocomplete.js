"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Autocomplete = Autocomplete;

var _core = require("@clayui/core");

var _dropDown = _interopRequireDefault(require("@clayui/drop-down"));

var _form = require("@clayui/form");

var _loadingIndicator = _interopRequireDefault(require("@clayui/loading-indicator"));

var _shared = require("@clayui/shared");

var _react = _interopRequireWildcard(require("react"));

var _excluded = ["active", "alignmentByViewport", "children", "containerElementRef", "defaultActive", "defaultItems", "defaultValue", "filterKey", "items", "loadingState", "menuTrigger", "messages", "onActiveChange", "onChange", "onItemsChange", "onLoadMore", "value"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var Collection = _core.__NOT_PUBLIC_COLLECTION.Collection;
var ESCAPE_REGEXP = /[.*+?^${}()|[\]\\]/g;

function Autocomplete(_ref) {
  var _containerElementRef$;

  var externalActive = _ref.active,
      alignmentByViewport = _ref.alignmentByViewport,
      children = _ref.children,
      containerElementRef = _ref.containerElementRef,
      defaultActive = _ref.defaultActive,
      defaultItems = _ref.defaultItems,
      defaultValue = _ref.defaultValue,
      filterKey = _ref.filterKey,
      externalItems = _ref.items,
      loadingState = _ref.loadingState,
      _ref$menuTrigger = _ref.menuTrigger,
      menuTrigger = _ref$menuTrigger === void 0 ? 'input' : _ref$menuTrigger,
      _ref$messages = _ref.messages,
      messages = _ref$messages === void 0 ? {
    loading: '',
    notFound: ''
  } : _ref$messages,
      onActiveChange = _ref.onActiveChange,
      onChange = _ref.onChange,
      onItemsChange = _ref.onItemsChange,
      onLoadMore = _ref.onLoadMore,
      externalValue = _ref.value,
      otherProps = _objectWithoutProperties(_ref, _excluded);

  var inputRef = (0, _react.useRef)(null);
  var menuRef = (0, _react.useRef)(null);
  var currentItemSelected = (0, _react.useRef)('');
  var isLoading = Boolean(loadingState !== undefined && loadingState === 1);
  var debouncedLoadingChange = (0, _shared.useDebounce)(isLoading, 500);
  var cursorsRef = (0, _react.useRef)(new Map());

  var _useState = (0, _react.useState)(Boolean(onLoadMore)),
      _useState2 = _slicedToArray(_useState, 2),
      infiniteScroll = _useState2[0],
      setInfiniteScroll = _useState2[1];

  var _useInternalState = (0, _shared.useInternalState)({
    defaultName: 'defaultItems',
    defaultValue: defaultItems,
    handleName: 'onItemsChange',
    name: 'items',
    onChange: onItemsChange,
    value: externalItems
  }),
      _useInternalState2 = _slicedToArray(_useInternalState, 3),
      items = _useInternalState2[0],
      isItemsUncontrolled = _useInternalState2[2];

  var _useInternalState3 = (0, _shared.useInternalState)({
    defaultName: 'defaultValue',
    defaultValue: defaultValue,
    handleName: 'onChange',
    name: 'value',
    onChange: onChange,
    value: externalValue
  }),
      _useInternalState4 = _slicedToArray(_useInternalState3, 2),
      _useInternalState4$ = _useInternalState4[0],
      value = _useInternalState4$ === void 0 ? '' : _useInternalState4$,
      setValue = _useInternalState4[1];

  var _useInternalState5 = (0, _shared.useInternalState)({
    defaultName: 'defaultActive',
    defaultValue: defaultActive,
    handleName: 'onActiveChange',
    name: 'active',
    onChange: onActiveChange,
    value: externalActive
  }),
      _useInternalState6 = _slicedToArray(_useInternalState5, 2),
      active = _useInternalState6[0],
      setActive = _useInternalState6[1];

  var ariaControlsId = (0, _shared.useId)();
  (0, _react.useEffect)(function () {
    if (active) {
      var onKeyDown = function onKeyDown(event) {
        if (inputRef.current && (event.key === _shared.Keys.Left || event.key === _shared.Keys.Right)) {
          inputRef.current.focus();
        }
      };

      document.addEventListener('keydown', onKeyDown, true);
      return function () {
        document.removeEventListener('keydown', onKeyDown, true);
      };
    }
  }, [active]);
  (0, _react.useEffect)(function () {
    if (active === false) {
      setValue(currentItemSelected.current);
    }
  }, [active]);
  (0, _react.useEffect)(function () {
    setInfiniteScroll(Boolean(onLoadMore) && !cursorsRef.current.has(value));
  }, [value]);
  var filterFn = (0, _react.useCallback)(function (itemValue) {
    return itemValue.match(new RegExp(value.replace(ESCAPE_REGEXP, '\\$&'), 'i')) !== null;
  }, [value]);
  var filteredItems = (0, _react.useMemo)(function () {
    if (debouncedLoadingChange) {
      return [];
    }

    if (!isItemsUncontrolled) {
      return items;
    }

    return items === null || items === void 0 ? void 0 : items.filter(function (option) {
      return filterFn(filterKey ? option[filterKey] : option);
    });
  }, [debouncedLoadingChange, isItemsUncontrolled, items, filterFn]);
  var isNotFound = (filteredItems === null || filteredItems === void 0 ? void 0 : filteredItems.length) === 0;
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_form.ClayInput, _extends({}, otherProps, {
    "aria-autocomplete": "list",
    "aria-controls": ariaControlsId,
    "aria-expanded": active,
    autoComplete: "off",
    autoCorrect: "off",
    insetAfter: isLoading,
    onChange: function onChange(event) {
      var value = event.target.value;

      if (!value) {
        currentItemSelected.current = value;
      }

      setActive(true);
      setValue(value);
    },
    onFocus: function onFocus(event) {
      if (otherProps.onFocus) {
        otherProps.onFocus(event);
      }

      if (menuTrigger === 'focus') {
        setActive(true);
      }
    },
    onKeyDown: function onKeyDown(event) {
      if (otherProps.onKeyDown) {
        otherProps.onKeyDown(event);
      }

      if (event.key === _shared.Keys.Enter) {
        setActive(false);
      }

      if (!active && event.altKey && event.key === _shared.Keys.Down) {
        event.stopPropagation();
        setActive(true);
      }
    },
    ref: inputRef,
    role: "combobox",
    spellCheck: false,
    value: value
  })), /*#__PURE__*/_react.default.createElement(_dropDown.default.Menu, {
    active: active,
    alignElementRef: containerElementRef,
    alignmentByViewport: alignmentByViewport,
    autoBestAlign: !!alignmentByViewport,
    className: "autocomplete-dropdown-menu",
    id: ariaControlsId,
    onActiveChange: setActive,
    ref: menuRef,
    style: {
      maxWidth: 'none',
      width: "".concat((_containerElementRef$ = containerElementRef.current) === null || _containerElementRef$ === void 0 ? void 0 : _containerElementRef$.clientWidth, "px")
    },
    suppress: [menuRef, inputRef],
    triggerRef: inputRef
  }, /*#__PURE__*/_react.default.createElement(Collection, {
    "aria-label": otherProps['aria-label'],
    "aria-labelledby": otherProps['aria-labelledby'],
    as: _dropDown.default.ItemList,
    estimateSize: 37,
    filter: isNotFound ? undefined : filterFn,
    filterKey: "value",
    infiniteScroll: infiniteScroll,
    isLoading: loadingState === 1,
    itemContainer: function itemContainer(_ref2) {
      var _children$props$value;

      var children = _ref2.children;
      var itemValue = (_children$props$value = children.props.value) !== null && _children$props$value !== void 0 ? _children$props$value : children.props.children;
      return /*#__PURE__*/_react.default.cloneElement(children, {
        match: value,
        onClick: function onClick(event) {
          var _inputRef$current;

          if (children.props.onClick) {
            children.props.onClick(event);
          }

          currentItemSelected.current = itemValue;
          setActive(false);
          setValue(itemValue);
          (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();
        },
        roleItem: 'option'
      });
    },
    items: filteredItems,
    onBottom: function onBottom() {
      if (onLoadMore) {
        var hasItems = onLoadMore();

        if (hasItems === null) {
          cursorsRef.current.set(value, true);
        }
      }
    },
    parentRef: menuRef,
    role: "listbox",
    virtualize: true
  }, debouncedLoadingChange ? /*#__PURE__*/_react.default.createElement(_dropDown.default.Item, {
    "aria-disabled": "true",
    className: "disabled",
    roleItem: "option"
  }, messages.loading) : isNotFound ? /*#__PURE__*/_react.default.createElement(_dropDown.default.Item, {
    "aria-disabled": "true",
    className: "disabled",
    roleItem: "option"
  }, messages.notFound) : children)), isLoading && /*#__PURE__*/_react.default.createElement(_form.ClayInput.GroupInsetItem, {
    after: true,
    "aria-label": messages.loading,
    "aria-valuemax": 100,
    "aria-valuemin": 0,
    role: "progressbar"
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "inline-item inline-item-middle"
  }, /*#__PURE__*/_react.default.createElement(_loadingIndicator.default, {
    size: "sm"
  }))));
}