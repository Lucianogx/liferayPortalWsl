"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ClayCardHorizontal = ClayCardHorizontal;

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireDefault(require("react"));

var _Context = _interopRequireDefault(require("./Context"));

var _excluded = ["children", "className"],
    _excluded2 = ["active", "children", "className", "selectable"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var ClayCardHorizontalBody = function ClayCardHorizontalBody(_ref) {
  var children = _ref.children,
      className = _ref.className,
      otherProps = _objectWithoutProperties(_ref, _excluded);

  return /*#__PURE__*/_react.default.createElement("div", _extends({
    className: (0, _classnames.default)('card card-horizontal', className)
  }, otherProps), children);
};

function ClayCardHorizontal(_ref2) {
  var active = _ref2.active,
      children = _ref2.children,
      className = _ref2.className,
      selectable = _ref2.selectable,
      otherProps = _objectWithoutProperties(_ref2, _excluded2);

  return /*#__PURE__*/_react.default.createElement(_Context.default.Provider, {
    value: {
      horizontal: true,
      interactive: false
    }
  }, /*#__PURE__*/_react.default.createElement("div", _extends({
    className: (0, _classnames.default)(className, {
      active: active,
      'card card-horizontal': !selectable,
      'form-check-card form-check form-check-middle-left': selectable
    }, 'card-type-directory')
  }, otherProps), children));
}

ClayCardHorizontal.Body = ClayCardHorizontalBody;