"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ClayCardWithHorizontal = void 0;

var _button = require("@clayui/button");

var _dropDown = require("@clayui/drop-down");

var _form = require("@clayui/form");

var _icon = _interopRequireDefault(require("@clayui/icon"));

var _layout = _interopRequireDefault(require("@clayui/layout"));

var _sticker = _interopRequireDefault(require("@clayui/sticker"));

var _react = _interopRequireDefault(require("react"));

var _Card = _interopRequireDefault(require("./Card"));

var _CardHorizontal = require("./CardHorizontal");

var _excluded = ["actions", "checkboxProps", "disabled", "dropDownTriggerProps", "href", "onSelectChange", "selected", "spritemap", "symbol", "title"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var ClayCardWithHorizontal = function ClayCardWithHorizontal(_ref) {
  var actions = _ref.actions,
      _ref$checkboxProps = _ref.checkboxProps,
      checkboxProps = _ref$checkboxProps === void 0 ? {} : _ref$checkboxProps,
      disabled = _ref.disabled,
      _ref$dropDownTriggerP = _ref.dropDownTriggerProps,
      dropDownTriggerProps = _ref$dropDownTriggerP === void 0 ? {
    'aria-label': 'More actions'
  } : _ref$dropDownTriggerP,
      href = _ref.href,
      onSelectChange = _ref.onSelectChange,
      _ref$selected = _ref.selected,
      selected = _ref$selected === void 0 ? false : _ref$selected,
      spritemap = _ref.spritemap,
      _ref$symbol = _ref.symbol,
      symbol = _ref$symbol === void 0 ? 'folder' : _ref$symbol,
      title = _ref.title,
      otherProps = _objectWithoutProperties(_ref, _excluded);

  var content = /*#__PURE__*/_react.default.createElement(_Card.default.Body, null, /*#__PURE__*/_react.default.createElement(_Card.default.Row, null, /*#__PURE__*/_react.default.createElement(_layout.default.ContentCol, null, /*#__PURE__*/_react.default.createElement(_sticker.default, {
    inline: true
  }, /*#__PURE__*/_react.default.createElement(_icon.default, {
    spritemap: spritemap,
    symbol: symbol
  }))), /*#__PURE__*/_react.default.createElement(_layout.default.ContentCol, {
    expand: true,
    gutters: true
  }, /*#__PURE__*/_react.default.createElement(_Card.default.Description, {
    disabled: disabled,
    displayType: "title",
    href: href
  }, title)), actions && /*#__PURE__*/_react.default.createElement(_layout.default.ContentCol, null, /*#__PURE__*/_react.default.createElement(_dropDown.ClayDropDownWithItems, {
    items: actions,
    spritemap: spritemap,
    trigger: /*#__PURE__*/_react.default.createElement(_button.ClayButtonWithIcon, _extends({}, dropDownTriggerProps, {
      className: "component-action",
      disabled: disabled,
      displayType: "unstyled",
      spritemap: spritemap,
      symbol: "ellipsis-v"
    }))
  }))));

  return /*#__PURE__*/_react.default.createElement(_CardHorizontal.ClayCardHorizontal, _extends({}, otherProps, {
    active: selected,
    selectable: !!onSelectChange
  }), onSelectChange && /*#__PURE__*/_react.default.createElement(_form.ClayCheckbox, _extends({}, checkboxProps, {
    checked: selected,
    disabled: disabled,
    onChange: function onChange() {
      return onSelectChange(!selected);
    }
  }), /*#__PURE__*/_react.default.createElement(_CardHorizontal.ClayCardHorizontal.Body, null, content)), !onSelectChange && content);
};

exports.ClayCardWithHorizontal = ClayCardWithHorizontal;