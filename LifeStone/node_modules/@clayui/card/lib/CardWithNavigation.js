"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ClayCardWithNavigation = void 0;

var _icon = _interopRequireDefault(require("@clayui/icon"));

var _layout = _interopRequireDefault(require("@clayui/layout"));

var _shared = require("@clayui/shared");

var _sticker = _interopRequireDefault(require("@clayui/sticker"));

var _react = _interopRequireDefault(require("react"));

var _Card = _interopRequireDefault(require("./Card"));

var _CardNavigation = require("./CardNavigation");

var _excluded = ["children", "description", "horizontal", "horizontalSymbol", "href", "onClick", "onKeyDown", "spritemap", "title"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var noop = function noop() {};

var ClayCardWithNavigation = function ClayCardWithNavigation(_ref) {
  var children = _ref.children,
      description = _ref.description,
      _ref$horizontal = _ref.horizontal,
      horizontal = _ref$horizontal === void 0 ? false : _ref$horizontal,
      _ref$horizontalSymbol = _ref.horizontalSymbol,
      horizontalSymbol = _ref$horizontalSymbol === void 0 ? '' : _ref$horizontalSymbol,
      href = _ref.href,
      onClick = _ref.onClick,
      _ref$onKeyDown = _ref.onKeyDown,
      _onKeyDown = _ref$onKeyDown === void 0 ? noop : _ref$onKeyDown,
      spritemap = _ref.spritemap,
      title = _ref.title,
      otherProps = _objectWithoutProperties(_ref, _excluded);

  return /*#__PURE__*/_react.default.createElement(_CardNavigation.ClayCardNavigation, _extends({}, otherProps, {
    horizontal: horizontal,
    href: href,
    onClick: onClick,
    onKeyDown: function onKeyDown(event) {
      if (event && event.key === _shared.Keys.Enter || event && event.key === _shared.Keys.Spacebar) {
        event.preventDefault();

        if (onClick) {
          onClick(event);
        }
      }

      _onKeyDown(event);
    },
    tabIndex: 0
  }), !horizontal && /*#__PURE__*/_react.default.createElement(_Card.default.AspectRatio, null, /*#__PURE__*/_react.default.createElement("span", {
    className: "aspect-ratio-item aspect-ratio-item-center-middle aspect-ratio-item-flush"
  }, children)), (horizontal || title || description) && /*#__PURE__*/_react.default.createElement(_Card.default.Body, null, !horizontal && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, title && /*#__PURE__*/_react.default.createElement(_Card.default.Description, {
    displayType: "title",
    truncate: true
  }, title), description && /*#__PURE__*/_react.default.createElement(_Card.default.Description, {
    displayType: "text",
    truncate: true
  }, description)), horizontal && /*#__PURE__*/_react.default.createElement(_Card.default.Row, null, /*#__PURE__*/_react.default.createElement(_layout.default.ContentCol, null, /*#__PURE__*/_react.default.createElement(_sticker.default, {
    inline: true
  }, /*#__PURE__*/_react.default.createElement(_icon.default, {
    spritemap: spritemap,
    symbol: horizontalSymbol
  }))), title && /*#__PURE__*/_react.default.createElement(_layout.default.ContentCol, {
    expand: true
  }, /*#__PURE__*/_react.default.createElement(_layout.default.ContentSection, null, /*#__PURE__*/_react.default.createElement(_Card.default.Description, {
    displayType: "title",
    truncate: true
  }, title))))));
};

exports.ClayCardWithNavigation = ClayCardWithNavigation;