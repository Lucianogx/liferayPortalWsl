"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var d3 = _interopRequireWildcard(require("d3"));

var _react = _interopRequireDefault(require("react"));

var _excluded = ["data", "elementProps", "forwardRef"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var DEFAULT_COLOR = {
  range: {
    max: '#0065e4',
    min: '#b1d4ff'
  },
  selected: '#4b9bff',
  value: 'pop_est'
};
/**
 * Geomap Base class.
 */

var GeomapBase = /*#__PURE__*/function () {
  function GeomapBase(config) {
    _classCallCheck(this, GeomapBase);

    this._data = config.data;
    this._element = config.element;
    this._color = _objectSpread(_objectSpread({}, DEFAULT_COLOR), config.color);
    this._pollingInterval = config.pollingInterval;
    this._height = '100%';
    this._width = '100%';
  }
  /**
   * Function to call when component is first mounting/attaching
   */


  _createClass(GeomapBase, [{
    key: "attached",
    value: function attached() {
      var _this = this;

      var w = typeof this._width === 'string' ? this._width : "".concat(this._width, "px");
      var h = typeof this._height === 'string' ? this._height : "".concat(this._height, "px");
      this.svg = d3.select(this._element).append('svg').attr('width', w).attr('height', h);
      this._handleClickHandler = this._handleClick.bind(this);
      this.rect = this.svg.append('rect').attr('fill', 'rgba(1, 1, 1, 0)').attr('width', w).attr('height', h).on('click', this._handleClickHandler);
      var bounds = this.svg.node().getBoundingClientRect();
      this.svgGroup = this.svg.append('g');
      this.mapLayer = this.svgGroup.append('g');
      this.projection = d3.geoMercator().scale(100).translate([bounds.width / 2, bounds.height / 2]);
      this.path = d3.geoPath().projection(this.projection);
      this._selected = null;

      this._onDataLoad(this._data);

      if (this._internalPollingInterval) {
        clearInterval(this._internalPollingInterval);
      }

      if (this.pollingInterval) {
        this._internalPollingInterval = setInterval(function () {
          _this._onDataLoad(_this._data);
        }, this._pollingInterval);
      }
    }
    /**
     * Function to call when disposing instance
     */

  }, {
    key: "disposed",
    value: function disposed() {
      if (this._internalPollingInterval) {
        clearInterval(this._internalPollingInterval);
        this._internalPollingInterval = null;
      }

      if (this.svg) {
        this.svg.remove();
      }
    }
    /**
     * Fill function
     */

  }, {
    key: "_fillFn",
    value: function _fillFn(d) {
      var value = d && d.properties ? d.properties[this._color.value] : 0;
      return this.colorScale(value || 0);
    }
    /**
     * Returns the height and width size.
     */

  }, {
    key: "getSize",
    value: function getSize() {
      return {
        height: this._height,
        width: this._width
      };
    }
    /**
     * Click handler
     */

  }, {
    key: "_handleClick",
    value: function _handleClick(d) {
      var _this2 = this;

      if (d && this._selected !== d) {
        this._selected = d;
      } else {
        this._selected = null;
      } // Highlight the clicked province


      this.mapLayer.selectAll('path').style('fill', function (d) {
        return _this2._selected && d === _this2._selected ? _this2._color.selected : _this2._fillFn.bind(_this2)(d);
      });
    }
    /**
     * Mouse over handler
     */

  }, {
    key: "_handleMouseOver",
    value: function _handleMouseOver(_feature, index, selection) {
      var node = selection[index];
      d3.select(node).style('fill', this._color.selected);
    }
    /**
     * Mouse over handler
     */

  }, {
    key: "_handleMouseOut",
    value: function _handleMouseOut(_feature, index, selection) {
      var _this3 = this;

      var node = selection[index];
      d3.select(node).style('fill', function (value) {
        return _this3._fillFn.bind(_this3)(value) || 0;
      });
    }
    /**
     * Data load handler
     */

  }, {
    key: "_onDataLoad",
    value: function _onDataLoad(mapData) {
      var _this4 = this;

      var features = mapData.features; // Calculate domain based on values received

      var values = features.map(function (f) {
        return f.properties[_this4._color.value];
      });
      this._domainMin = Math.min.apply(null, values);
      this._domainMax = Math.max.apply(null, values);
      this.colorScale = d3.scaleLinear().domain([this._domainMin, this._domainMax]).range([this._color.range.min, this._color.range.max]);
      this.mapLayer.selectAll('path').data(features).enter().append('path').attr('d', this.path).attr('vector-effect', 'non-scaling-stroke').attr('fill', function (value) {
        return _this4._fillFn.bind(_this4)(value) || 0;
      }).on('click', this._handleClickHandler).on('mouseout', this._handleMouseOut.bind(this)).on('mouseover', this._handleMouseOver.bind(this));
    }
  }]);

  return GeomapBase;
}();

/**
 * GeoMap Chart component.
 */
var Geomap = function Geomap(_ref) {
  var data = _ref.data,
      _ref$elementProps = _ref.elementProps,
      elementProps = _ref$elementProps === void 0 ? {} : _ref$elementProps,
      forwardRef = _ref.forwardRef,
      otherProps = _objectWithoutProperties(_ref, _excluded);

  var elementRef = _react.default.useRef(null);

  _react.default.useEffect(function () {
    if (forwardRef) {
      forwardRef.current = new GeomapBase(_objectSpread(_objectSpread({}, otherProps), {}, {
        data: data,
        element: elementRef.current
      }));
      forwardRef.current.attached();
    }

    return function () {
      forwardRef.current.disposed();
    };
  }, []);

  var _ref2 = forwardRef.current ? forwardRef.current.getSize() : {},
      _ref2$height = _ref2.height,
      height = _ref2$height === void 0 ? '100%' : _ref2$height,
      _ref2$width = _ref2.width,
      width = _ref2$width === void 0 ? '100%' : _ref2$width;

  return /*#__PURE__*/_react.default.createElement("div", _extends({
    style: {
      height: height,
      width: width
    }
  }, elementProps, {
    ref: elementRef
  }));
};

var _default = /*#__PURE__*/_react.default.forwardRef(function (props, ref) {
  return /*#__PURE__*/_react.default.createElement(Geomap, _extends({
    forwardRef: ref
  }, props));
});

exports.default = _default;