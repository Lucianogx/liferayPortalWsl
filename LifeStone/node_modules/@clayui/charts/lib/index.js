"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "bb", {
  enumerable: true,
  get: function get() {
    return _billboard.bb;
  }
});
exports.default = void 0;

var _billboard = require("billboard.js");

var _react = _interopRequireDefault(require("react"));

var _BillboardWrapper = _interopRequireDefault(require("./BillboardWrapper"));

var _GeoMap = _interopRequireDefault(require("./GeoMap"));

var _Predictive = _interopRequireDefault(require("./Predictive"));

var _config = require("./config");

var _excluded = ["color", "data", "elementProps", "grid", "line", "point"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * Chart component.
 */
var ClayChart = /*#__PURE__*/_react.default.forwardRef(function (_ref, ref) {
  var color = _ref.color,
      data = _ref.data,
      elementProps = _ref.elementProps,
      grid = _ref.grid,
      line = _ref.line,
      point = _ref.point,
      otherProps = _objectWithoutProperties(_ref, _excluded);

  var defaultRef = _react.default.useRef();

  var ChartComponent;

  switch (data.type) {
    case 'geo-map':
      delete data.type;
      ChartComponent = _GeoMap.default;
      break;

    case 'predictive':
      delete data.type;
      ChartComponent = _Predictive.default;
      break;

    default:
      ChartComponent = _BillboardWrapper.default;
  }

  return /*#__PURE__*/_react.default.createElement(ChartComponent, _extends({}, otherProps, {
    color: _objectSpread({
      pattern: _config.DEFAULT_COLORS
    }, color),
    data: data,
    elementProps: elementProps,
    grid: Object.assign(_config.DEFAULT_GRID_OBJECT, grid),
    line: _objectSpread({
      classes: _config.DEFAULT_LINE_CLASSES
    }, line),
    point: _objectSpread({
      pattern: _config.DEFAULT_POINT_PATTERNS
    }, point),
    ref: ref || defaultRef
  }));
});

ClayChart.displayName = 'ClayChart';
var _default = ClayChart;
exports.default = _default;