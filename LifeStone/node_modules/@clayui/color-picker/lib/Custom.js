"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _icon = _interopRequireDefault(require("@clayui/icon"));

var _react = _interopRequireWildcard(require("react"));

var _tinycolor = _interopRequireDefault(require("tinycolor2"));

var _Splotch = _interopRequireDefault(require("./Splotch"));

var _util = require("./util");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * SPDX-FileCopyrightText: Â© 2019 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: BSD-3-Clause
 */
var DEFAULT_SPLOTCH_COLOR = 'FFFFFF';

var ClayColorPickerCustom = function ClayColorPickerCustom(_ref) {
  var color = _ref.color,
      colors = _ref.colors,
      editorActive = _ref.editorActive,
      label = _ref.label,
      onChange = _ref.onChange,
      onColorsChange = _ref.onColorsChange,
      onEditorActiveChange = _ref.onEditorActiveChange,
      onSplotchChange = _ref.onSplotchChange,
      showPalette = _ref.showPalette,
      splotch = _ref.splotch,
      spritemap = _ref.spritemap;
  var previousColorRef = (0, _react.useRef)(color);
  return /*#__PURE__*/_react.default.createElement("div", null, label && /*#__PURE__*/_react.default.createElement("div", {
    className: "clay-color-header"
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "component-title"
  }, label), showPalette && /*#__PURE__*/_react.default.createElement("button", {
    className: "".concat(editorActive ? 'close' : '', " component-action"),
    onClick: function onClick() {
      return onEditorActiveChange(!editorActive);
    },
    type: "button"
  }, /*#__PURE__*/_react.default.createElement(_icon.default, {
    spritemap: spritemap,
    symbol: editorActive ? 'times' : 'drop'
  }))), showPalette && /*#__PURE__*/_react.default.createElement("div", {
    className: "clay-color-swatch"
  }, colors.map(function (hex, index) {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "clay-color-swatch-item",
      key: index
    }, /*#__PURE__*/_react.default.createElement(_Splotch.default, {
      active: index === splotch,
      onClick: function onClick() {
        if (splotch !== index) {
          onSplotchChange(index);
        } // The hexadecimal color `#FFFFFF` is treated as an empty
        // slot so when the user enters a color that doesn't exist in
        // the custom, clicking on an empty slot will replace that
        // slot with the new color if don't have an active slot
        // being edited.


        if (hex === DEFAULT_SPLOTCH_COLOR) {
          onEditorActiveChange(true); // Replaces the slot color with the color entered in the
          // input if it does not have an active slot being edited.

          if (previousColorRef.current !== (0, _tinycolor.default)(DEFAULT_SPLOTCH_COLOR) && (0, _util.findColorIndex)(colors, color) === -1 && typeof splotch === 'undefined') {
            onColorsChange(color.toHex(), index);
            onChange(color, color.getOriginalInput());
          } else {
            var newColor = (0, _tinycolor.default)(hex);
            onColorsChange(hex, index);
            onChange(newColor, hex);
          }
        } else {
          var _newColor = hex.includes('var(') ? (0, _util.getCSSVariableColor)(hex) : (0, _tinycolor.default)(hex);

          previousColorRef.current = _newColor;
          onChange(_newColor, hex);
        }
      },
      value: hex
    }));
  })));
};

var _default = ClayColorPickerCustom;
exports.default = _default;