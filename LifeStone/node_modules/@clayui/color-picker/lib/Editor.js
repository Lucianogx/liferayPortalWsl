"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Editor = Editor;
exports.useEditor = useEditor;

var _form = _interopRequireWildcard(require("@clayui/form"));

var _react = _interopRequireWildcard(require("react"));

var _tinycolor = _interopRequireDefault(require("tinycolor2"));

var _GradientSelector = _interopRequireDefault(require("./GradientSelector"));

var _Hue = _interopRequireDefault(require("./Hue"));

var _util = require("./util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function reducer(state, action) {
  return _objectSpread(_objectSpread({}, state), action);
}

function useEditor(value, color, colors) {
  var _useReducer = (0, _react.useReducer)(reducer, {}, function () {
    var index = colors.findIndex(function (color) {
      return color.toUpperCase() === value.toUpperCase();
    });
    return {
      hex: color.toHex(),
      hue: color.toHsv().h,
      splotch: index !== -1 ? index : undefined
    };
  }),
      _useReducer2 = _slicedToArray(_useReducer, 2),
      state = _useReducer2[0],
      dispatch = _useReducer2[1];

  return [state, dispatch];
}

/**
 * Renders input that displays RGB values
 */
var RGBInput = function RGBInput(_ref) {
  var name = _ref.name,
      _onChange2 = _ref.onChange,
      value = _ref.value;
  var inputRef = (0, _react.useRef)(null);

  var _useState = (0, _react.useState)(value),
      _useState2 = _slicedToArray(_useState, 2),
      inputValue = _useState2[0],
      setInputValue = _useState2[1];

  (0, _react.useEffect)(function () {
    if (document.activeElement !== inputRef.current) {
      setInputValue(value);
    }
  }, [value]);
  return /*#__PURE__*/_react.default.createElement(_form.default.Group, null, /*#__PURE__*/_react.default.createElement(_form.ClayInput.Group, null, /*#__PURE__*/_react.default.createElement(_form.ClayInput.GroupItem, null, /*#__PURE__*/_react.default.createElement(_form.ClayInput, {
    "data-testid": "".concat(name, "Input"),
    insetBefore: true,
    max: "255",
    min: "0",
    onChange: function onChange(event) {
      var value = event.target.value;

      if (value === '') {
        return;
      }

      var newVal = Number(value);

      if (newVal < 0) {
        newVal = 0;
      } else if (newVal > 255) {
        newVal = 255;
      }

      setInputValue(newVal);

      _onChange2(_defineProperty({}, name, newVal));
    },
    ref: inputRef,
    type: "number",
    value: inputValue
  }), /*#__PURE__*/_react.default.createElement(_form.ClayInput.GroupInsetItem, {
    before: true,
    tag: "label"
  }, name.toUpperCase()))));
};

function Editor(_ref2) {
  var color = _ref2.color,
      colors = _ref2.colors,
      hex = _ref2.hex,
      hue = _ref2.hue,
      _onChange3 = _ref2.onChange,
      onColorChange = _ref2.onColorChange,
      onHexChange = _ref2.onHexChange,
      onHueChange = _ref2.onHueChange;

  var _color$toRgb = color.toRgb(),
      b = _color$toRgb.b,
      g = _color$toRgb.g,
      r = _color$toRgb.r;

  var _color$toHsv = color.toHsv(),
      s = _color$toHsv.s,
      v = _color$toHsv.v;

  var rgbArr = [[r, 'r'], [g, 'g'], [b, 'b']];
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    className: "clay-color-map-group"
  }, /*#__PURE__*/_react.default.createElement(_GradientSelector.default, {
    color: color,
    hue: hue,
    onChange: function onChange(saturation, visibility) {
      onColorChange((0, _tinycolor.default)({
        h: hue,
        s: saturation,
        v: visibility
      }));
    }
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "clay-color-map-values"
  }, rgbArr.map(function (_ref3) {
    var _ref4 = _slicedToArray(_ref3, 2),
        val = _ref4[0],
        key = _ref4[1];

    return /*#__PURE__*/_react.default.createElement(RGBInput, {
      key: key,
      name: key,
      onChange: function onChange(newVal) {
        var newColor = (0, _tinycolor.default)(_objectSpread({
          b: b,
          g: g,
          r: r
        }, newVal));
        onHueChange(newColor.toHsv().h);
        onColorChange(newColor);
      },
      value: val
    });
  }))), /*#__PURE__*/_react.default.createElement(_Hue.default, {
    onChange: function onChange(hue) {
      onHueChange(hue);
      onColorChange((0, _tinycolor.default)({
        h: hue,
        s: s,
        v: v
      }));
    },
    value: hue
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "clay-color-footer"
  }, /*#__PURE__*/_react.default.createElement(_form.default.Group, null, /*#__PURE__*/_react.default.createElement(_form.ClayInput.Group, null, /*#__PURE__*/_react.default.createElement(_form.ClayInput.GroupItem, null, /*#__PURE__*/_react.default.createElement(_form.ClayInput, {
    "data-testid": "customHexInput",
    insetBefore: true,
    onBlur: function onBlur(event) {
      var newColor = (0, _tinycolor.default)(event.target.value);

      if (newColor.isValid()) {
        onHexChange(newColor.toHex());
      } else {
        onHexChange(color.toHex());
      }
    },
    onChange: function onChange(event) {
      var newHexValue = event.target.value;
      onHexChange(newHexValue);
      var newColor = (0, _tinycolor.default)(newHexValue);

      if (newColor.isValid()) {
        onHueChange(newColor.toHsv().h);
        var hasColor = (0, _util.findColorIndex)(colors, newColor);

        _onChange3(newColor, hasColor === -1);
      }
    },
    type: "text",
    value: hex.toUpperCase().substring(0, 6)
  }), /*#__PURE__*/_react.default.createElement(_form.ClayInput.GroupInsetItem, {
    before: true,
    tag: "label"
  }, "#"))))));
}