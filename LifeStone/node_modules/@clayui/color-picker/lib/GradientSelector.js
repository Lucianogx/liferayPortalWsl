"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _hooks = require("./hooks");

var _util = require("./util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * SPDX-FileCopyrightText: Â© 2019 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: BSD-3-Clause
 */
var useIsomorphicLayoutEffect = typeof window === 'undefined' ? _react.default.useEffect : _react.default.useLayoutEffect;
/**
 * Renders GradientSelector component
 */

var ClayColorPickerGradientSelector = function ClayColorPickerGradientSelector(_ref) {
  var color = _ref.color,
      _ref$onChange = _ref.onChange,
      onChange = _ref$onChange === void 0 ? function () {} : _ref$onChange,
      _ref$hue = _ref.hue,
      hue = _ref$hue === void 0 ? 0 : _ref$hue;

  var containerRef = _react.default.useRef(null);

  var selectorActive = _react.default.useRef(false);

  var _usePointerPosition = (0, _hooks.usePointerPosition)(containerRef),
      onPointerMove = _usePointerPosition.onPointerMove,
      setXY = _usePointerPosition.setXY,
      x = _usePointerPosition.x,
      y = _usePointerPosition.y;

  var removeListeners = function removeListeners() {
    selectorActive.current = false;
    window.removeEventListener('pointermove', onPointerMove);
    window.removeEventListener('pointerup', removeListeners);
  };

  useIsomorphicLayoutEffect(function () {
    var current = containerRef.current;

    if (current && selectorActive.current) {
      onChange((0, _util.xToSaturation)(x, current), (0, _util.yToVisibility)(y, current));
    }
  }, [x, y]);

  _react.default.useEffect(function () {
    if (containerRef.current && !selectorActive.current) {
      setXY((0, _util.colorToXY)(color, containerRef.current));
    }
  }, [color]);

  _react.default.useEffect(function () {
    return removeListeners;
  }, []);

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "clay-color-map clay-color-map-hsb",
    onPointerDown: function onPointerDown(event) {
      event.preventDefault();
      selectorActive.current = true;
      onPointerMove(event);
      containerRef.current.querySelector('.clay-color-map-pointer').focus();
      window.addEventListener('pointermove', onPointerMove);
      window.addEventListener('pointerup', removeListeners);
    },
    ref: containerRef,
    style: {
      backgroundColor: "hsl(".concat(hue, ", 100%, 50%)"),
      backgroundImage: "linear-gradient(to top, #000, rgba(0, 0, 0, 0)), linear-gradient(to right, #FFF, rgba(255, 255, 255, 0))"
    }
  }, /*#__PURE__*/_react.default.createElement("button", {
    className: "clay-color-map-pointer clay-color-pointer",
    style: {
      background: color.toHexString(),
      left: x - 7,
      top: y - 7
    },
    type: "button"
  }));
};

var _default = ClayColorPickerGradientSelector;
exports.default = _default;