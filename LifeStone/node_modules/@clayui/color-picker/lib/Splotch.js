"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _button = _interopRequireDefault(require("@clayui/button"));

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireDefault(require("react"));

var _tinycolor = _interopRequireDefault(require("tinycolor2"));

var _excluded = ["active", "className", "size", "title", "value"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * Renders component that displays a color
 */
var ClayColorPickerSplotch = /*#__PURE__*/_react.default.forwardRef(function (_ref, ref) {
  var _otherProps$style, _otherProps$style2, _otherProps$style3;

  var active = _ref.active,
      className = _ref.className,
      size = _ref.size,
      title = _ref.title,
      value = _ref.value,
      otherProps = _objectWithoutProperties(_ref, _excluded);

  var color = (0, _tinycolor.default)(value);
  var isHex = (color.getFormat() || '').match('hex');
  var requireBorder = !color.isValid() || _tinycolor.default.readability('#FFF', value) < 1.1;
  return /*#__PURE__*/_react.default.createElement(_button.default, _extends({}, otherProps, {
    className: (0, _classnames.default)('clay-color-btn', className, {
      active: active,
      'clay-color-btn-bordered': requireBorder
    }),
    displayType: null,
    ref: ref,
    style: {
      background: (otherProps === null || otherProps === void 0 ? void 0 : (_otherProps$style = otherProps.style) === null || _otherProps$style === void 0 ? void 0 : _otherProps$style.background) || "".concat(isHex ? '#' : '').concat(value),
      height: (otherProps === null || otherProps === void 0 ? void 0 : (_otherProps$style2 = otherProps.style) === null || _otherProps$style2 === void 0 ? void 0 : _otherProps$style2.height) || size,
      width: (otherProps === null || otherProps === void 0 ? void 0 : (_otherProps$style3 = otherProps.style) === null || _otherProps$style3 === void 0 ? void 0 : _otherProps$style3.width) || size
    },
    title: title || "".concat(isHex ? '#' : '').concat(value)
  }));
});

ClayColorPickerSplotch.displayName = 'ClayColorPickerSplotch';
var _default = ClayColorPickerSplotch;
exports.default = _default;