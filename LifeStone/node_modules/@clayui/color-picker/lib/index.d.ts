/**
 * SPDX-FileCopyrightText: Â© 2019 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: BSD-3-Clause
 */
import ClayDropDown from '@clayui/drop-down';
import { InternalDispatch } from '@clayui/shared';
import React from 'react';
interface IProps extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'onChange'> {
    /**
     * Property to define whether the DropDown menu is expanded or not
     * (controlled).
     */
    active?: boolean;
    /**
     * Labels for the aria attributes
     */
    ariaLabels?: {
        selectColor: string;
        selectionIs: string;
    };
    /**
     * List of color hex values
     */
    colors?: Array<string>;
    /**
     * Property to set the default value of `active` (uncontrolled).
     */
    defaultActive?: boolean;
    /**
     * Property to set the default value (uncontrolled).
     */
    defaultValue?: string;
    /**
     * Flag for adding ColorPicker in disabled state
     */
    disabled?: boolean;
    /**
     * Props to add to the DropDown container.
     */
    dropDownContainerProps?: React.ComponentProps<typeof ClayDropDown.Menu>['containerProps'];
    /**
     * The label describing the collection of colors in the menu
     */
    label?: string;
    /**
     * The input attribute for name
     */
    name?: string;
    /**
     * Callback function for when active state changes (controlled).
     */
    onActiveChange?: InternalDispatch<boolean>;
    /**
     * Callback that is called when the value changes (controlled).
     */
    onChange?: InternalDispatch<string>;
    /**
     * Callback for when the list of colors change
     */
    onColorsChange?: (val: Array<string>) => void;
    /**
     * Callback for when the selected color changes
     * @deprecated since v3.51.0 - use `onChange` instead.
     */
    onValueChange?: (val: string) => void;
    predefinedColors?: Array<string>;
    /**
     * Determines if the hex input should render
     */
    showHex?: boolean;
    /**
     * Flag for showing and disabling the palette of colors.
     * This defaults to true
     */
    showPalette?: boolean;
    showPredefinedColorsWithCustom?: boolean;
    /**
     * Flag to indicate if `input-group-sm` class should
     * be applied to `ClayInput.Group`
     */
    small?: boolean;
    /**
     * The title of the Main Splotch component
     */
    splotchTitle?: string;
    /**
     * Path to the location of the spritemap resource.
     */
    spritemap?: string;
    /**
     * Title to describe the color picker form element
     */
    title?: string;
    /**
     * Determines if the native color picker should be used
     */
    useNative?: boolean;
    /**
     * The value property sets the current value (controlled).
     */
    value?: string;
}
declare const ClayColorPicker: ({ active, ariaLabels, colors, defaultActive, defaultValue, disabled, dropDownContainerProps, label, name, onActiveChange, onChange, onColorsChange, onValueChange, predefinedColors, showHex, showPalette, showPredefinedColorsWithCustom, small, splotchTitle, spritemap, title, useNative, value, ...otherProps }: IProps) => JSX.Element;
export default ClayColorPicker;
