"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findColorIndex = exports.colorToXY = void 0;
exports.getCSSVariableColor = getCSSVariableColor;
exports.xToHue = exports.hueToX = void 0;
exports.xToSaturation = xToSaturation;
exports.yToVisibility = yToVisibility;

var _tinycolor = _interopRequireDefault(require("tinycolor2"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * SPDX-FileCopyrightText: Â© 2019 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: BSD-3-Clause
 */

/**
 * Utility function for getting x & y coordinates for gradient
 */
var colorToXY = function colorToXY(color, node) {
  var rect = node.getBoundingClientRect();

  var _color$toHsv = color.toHsv(),
      s = _color$toHsv.s,
      v = _color$toHsv.v;

  var x = Math.round(s * 100 * rect.width / 100);
  var y = Math.round((v * 100 - 100) * -1 * rect.height / 100);
  return {
    x: x,
    y: y
  };
};
/**
 * Utility function for getting the x position from hue
 */


exports.colorToXY = colorToXY;

var hueToX = function hueToX(hue, node) {
  if (Number.isNaN(hue)) {
    return 0;
  }

  return hue / 360 * node.getBoundingClientRect().width;
};
/**
 * Utility function for getting hue from the x position
 */


exports.hueToX = hueToX;

var xToHue = function xToHue(x, node) {
  if (Number.isNaN(x)) {
    return 0;
  }

  return x / node.getBoundingClientRect().width * 360;
};
/**
 * Utility function for getting saturation from the x position
 */


exports.xToHue = xToHue;

function xToSaturation(x, node) {
  return Math.round(x * 100 / node.getBoundingClientRect().width);
}
/**
 * Utility function for getting visibility from the y position
 */


function yToVisibility(y, node) {
  return Math.round(-(y * 100 / node.getBoundingClientRect().height) + 100);
}

var findColorIndex = function findColorIndex(colors, color) {
  return colors.findIndex(function (currentColor) {
    return _tinycolor.default.equals(currentColor.includes('var(') ? getCSSVariableColor(currentColor) : (0, _tinycolor.default)(currentColor), color);
  });
};

exports.findColorIndex = findColorIndex;

function getCSSVariableColor(value) {
  var element = document.createElement('div');
  element.setAttribute('style', "background: ".concat(value, ";"));
  document.body.appendChild(element);
  var color = (0, _tinycolor.default)(getComputedStyle(element).backgroundColor);
  document.body.removeChild(element);
  return color;
}