/**
 * SPDX-FileCopyrightText: Â© 2022 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: BSD-3-Clause
 */
import React from 'react';
export declare type DragAndDropMessages = {
    dragDescriptionKeyboard: string;
    dragItem: string;
    dragStartedKeyboard: string;
    dropCanceled: string;
    dropComplete: string;
    dropDescriptionKeyboard: string;
    dropIndicator: string;
    dropOn: string;
    endDragKeyboard: string;
    insertAfter: string;
    insertBefore: string;
};
declare type ContextProps = {
    mode: 'keyboard' | 'mouse' | null;
    position: 'bottom' | 'middle' | 'top' | null;
    currentDrag: React.Key | null;
    dragDescribedBy: string;
    dragDropDescribedBy: string;
    dragCancelDescribedBy: string;
    currentTarget: React.Key | null;
    messages: DragAndDropMessages;
    onCancel: () => void;
    onDragStart: (target: React.Key) => void;
    onDrop: () => void;
};
declare type Props = {
    rootRef: React.RefObject<HTMLUListElement>;
    children: React.ReactNode;
    messages?: DragAndDropMessages;
};
export declare const DragAndDropProvider: ({ children, messages, rootRef, }: Props) => JSX.Element;
export declare const TARGET_POSITION: {
    readonly BOTTOM: "bottom";
    readonly MIDDLE: "middle";
    readonly TOP: "top";
};
declare type ValueOf<T> = T[keyof T];
export declare type Position = ValueOf<typeof TARGET_POSITION>;
export declare function getNewItemPath(path: Array<number>, overPosition: Position): number[];
export declare const useDnD: () => ContextProps;
export {};
