/**
 * SPDX-FileCopyrightText: Â© 2019 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: BSD-3-Clause
 */
import React from 'react';
import { useResource } from './useResource';
import type { NetworkStatus } from './useResource';
declare type ChildrenProps = {
    data: any;
    error: string | boolean;
    loading: boolean;
    networkStatus?: NetworkStatus;
    refetch: Function;
};
interface IProps extends Omit<Parameters<typeof useResource>[0], 'onNetworkStatusChange'> {
    /**
     * It uses a render props pattern made popular by libraries
     * like React Motion and React Router.
     *
     * Children as a function is required for the DataProvider
     * to pass the props with data information, network status,
     * refetch method and others. If this is an impediment try
     * using the `useResource` hook.
     */
    children: (props: ChildrenProps) => React.ReactElement;
    /**
     * Set to true means that network status information will be passed
     * via `renders props` and will also cause new renderings as
     * networkStatus changes, when false rendering does not
     * happen again.
     */
    notifyOnNetworkStatusChange?: boolean;
}
declare const ClayDataProvider: ({ children, notifyOnNetworkStatusChange, ...otherProps }: IProps) => JSX.Element;
export { useResource };
export default ClayDataProvider;
