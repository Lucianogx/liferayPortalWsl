"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.timeout = exports.getIdentifier = void 0;

var _fastJsonStableStringify = _interopRequireDefault(require("fast-json-stable-stringify"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

/**
 * Implementation of the timeout.
 * Based on: https://github.com/github/fetch/issues/175#issuecomment-125779262
 */
var timeout = function timeout(ms, promise, controller) {
  return new Promise(function (resolve, reject) {
    var timeoutId = setTimeout(function () {
      controller === null || controller === void 0 ? void 0 : controller.abort();
      reject(new Error('timeout'));
    }, ms);
    promise.then(function (res) {
      clearTimeout(timeoutId);
      resolve(res);
    }).catch(function (error) {
      clearTimeout(timeoutId);
      reject(error);
    });
  });
};
/**
 * Generates a unique identifier from a request, using the request data like
 * URL, body, headers... from an HTTP request.
 */


exports.timeout = timeout;

var getIdentifier = function getIdentifier(link, variables, options) {
  var uid = link;

  if (variables) {
    uid += (0, _fastJsonStableStringify.default)(variables);
  }

  if (_typeof(options) === 'object') {
    var serializedOptions = _objectSpread({}, options);

    var keys = Object.keys(options);

    for (var index = 0; index < keys.length; index++) {
      var key = keys[index];
      var value = options[key];

      if (value instanceof URLSearchParams) {
        serializedOptions[key] = value.toString();
      }
    }

    uid += (0, _fastJsonStableStringify.default)(serializedOptions);
  }

  return uid;
};

exports.getIdentifier = getIdentifier;