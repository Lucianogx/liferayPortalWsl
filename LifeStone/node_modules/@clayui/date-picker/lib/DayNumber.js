"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _shared = require("@clayui/shared");

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireDefault(require("react"));

var _Helpers = require("./Helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var ClayDatePickerDayNumber = function ClayDatePickerDayNumber(_ref) {
  var day = _ref.day,
      daysSelected = _ref.daysSelected,
      disabled = _ref.disabled,
      index = _ref.index,
      isFocused = _ref.isFocused,
      _onClick = _ref.onClick,
      range = _ref.range;
  var date = day.date,
      nextMonth = day.nextMonth,
      previousMonth = day.previousMonth;

  var _daysSelected = _slicedToArray(daysSelected, 2),
      startDate = _daysSelected[0],
      endDate = _daysSelected[1];

  var isStartAndEndDateRange = startDate.toDateString() !== endDate.toDateString() && isWithinInterval(date, daysSelected);
  var hasEndDateSelected = date.toDateString() === endDate.toDateString();
  var hasStartDateSelected = date.toDateString() === startDate.toDateString();
  return /*#__PURE__*/_react.default.createElement("div", {
    "aria-selected": isStartAndEndDateRange || hasStartDateSelected ? true : undefined,
    className: (0, _classnames.default)('date-picker-col', range && {
      'c-selected': isStartAndEndDateRange,
      'c-selected-end': hasEndDateSelected && !hasStartDateSelected,
      'c-selected-start': hasStartDateSelected && !hasEndDateSelected
    }),
    role: "gridcell"
  }, /*#__PURE__*/_react.default.createElement("button", {
    "aria-label": (0, _Helpers.setDate)(date, {
      hours: 12,
      milliseconds: 0,
      minutes: 0,
      seconds: 0
    }).toDateString(),
    className: (0, _classnames.default)('date-picker-date date-picker-calendar-item', {
      active: hasStartDateSelected || range && hasEndDateSelected,
      disabled: disabled,
      'next-month-date': nextMonth,
      'previous-month-date': previousMonth
    }),
    "data-index": index,
    disabled: disabled,
    onClick: function onClick() {
      return _onClick(date);
    },
    onKeyDown: function onKeyDown(event) {
      // When tabbing and selecting a DayNumber using
      // SPACE key the active state it's not being removed.
      // See https://github.com/liferay/clay/issues/3374 for more details.
      if (event.key === _shared.Keys.Spacebar) {
        event.preventDefault();
      }
    },
    onKeyUp: function onKeyUp(event) {
      if (event.key === _shared.Keys.Spacebar) {
        _onClick(date);
      }
    },
    tabIndex: isFocused ? undefined : -1,
    type: "button"
  }, date.getDate()));
};

function isWithinInterval(date, interval) {
  var _interval = _slicedToArray(interval, 2),
      start = _interval[0],
      end = _interval[1];

  var time = date.getTime();
  var startTime = start.getTime();
  var endTime = end.getTime();

  if (startTime > endTime) {
    return false;
  }

  return time >= startTime && time <= endTime;
}

var _default = ClayDatePickerDayNumber;
exports.default = _default;