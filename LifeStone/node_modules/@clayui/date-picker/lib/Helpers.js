"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addMonths = addMonths;
exports.clone = clone;
Object.defineProperty(exports, "formatDate", {
  enumerable: true,
  get: function get() {
    return _format.default;
  }
});
exports.isValid = isValid;
Object.defineProperty(exports, "parseDate", {
  enumerable: true,
  get: function get() {
    return _parse.default;
  }
});
exports.range = range;
exports.setDate = setDate;
exports.setMonth = setMonth;

var _format = _interopRequireDefault(require("date-fns/format"));

var _parse = _interopRequireDefault(require("date-fns/parse"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * SPDX-FileCopyrightText: Â© 2019 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: BSD-3-Clause
 */

/**
 * Clone a date object.
 */
function clone(date) {
  return new Date(date instanceof Date ? date.getTime() : date);
}

function range(_ref) {
  var end = _ref.end,
      start = _ref.start;
  return Array.from({
    length: end - start + 1
  }, function (v, k) {
    return k + start;
  });
}

function addMonths(date, months) {
  date = clone(date);
  date.setMonth(date.getMonth() + months);
  return date;
}

function setDate(date, options) {
  date = clone(date);
  return Object.keys(options).reduce(function (acc, key) {
    var method = "set".concat(key.charAt(0).toUpperCase() + key.slice(1)); // @ts-ignore

    acc[method](options[key]);
    return acc;
  }, date);
}

function isValid(date) {
  return date instanceof Date && !isNaN(date.getTime());
}

function setMonth(range, month, currentMonth) {
  var date = addMonths(currentMonth, month);
  var year = date.getFullYear();

  if (range.find(function (elem) {
    return elem.value === year;
  })) {
    return date;
  }
}