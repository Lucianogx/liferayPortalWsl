"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useWeeks = exports.useDaysSelected = exports.useCurrentTime = exports.useCalendarNavigation = void 0;

var _shared = require("@clayui/shared");

var _react = require("react");

var _Helpers = require("./Helpers");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var normalizeTime = function normalizeTime(date) {
  return (0, _Helpers.setDate)(date, {
    hours: 12,
    milliseconds: 0,
    minutes: 0,
    seconds: 0
  });
};
/**
 * Handles selected days and stabilize date time when set to avoid problems
 * when the range is used to check intervals.
 */


var useDaysSelected = function useDaysSelected(defaultDays) {
  var _useState = (0, _react.useState)(defaultDays),
      _useState2 = _slicedToArray(_useState, 2),
      daysSelected = _useState2[0],
      set = _useState2[1];

  var setDaysSelected = (0, _react.useCallback)(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        start = _ref2[0],
        end = _ref2[1];

    // Preserves the reference of dates
    if (start === end) {
      var date = normalizeTime(start);
      set([date, date]);
    } else {
      set([normalizeTime(start), normalizeTime(end)]);
    }
  }, []);
  return [daysSelected, setDaysSelected];
};
/**
 * Generates the table of days of the month.
 */


exports.useDaysSelected = useDaysSelected;

var useWeeks = function useWeeks(currentMonth, firstDayOfWeek) {
  var _useState3 = (0, _react.useState)(function () {
    return getWeekArray(currentMonth, firstDayOfWeek);
  }),
      _useState4 = _slicedToArray(_useState3, 2),
      weeks = _useState4[0],
      set = _useState4[1];

  var setWeeks = (0, _react.useCallback)(function (value) {
    return set(getWeekArray(value, firstDayOfWeek));
  }, [firstDayOfWeek]);
  return [weeks, setWeeks];
};
/**
 * Sets the current time
 */


exports.useWeeks = useWeeks;

var useCurrentTime = function useCurrentTime(defaultTime, use12Hours) {
  var _useState5 = (0, _react.useState)(defaultTime),
      _useState6 = _slicedToArray(_useState5, 2),
      currentTime = _useState6[0],
      set = _useState6[1];

  var setCurrentTime = (0, _react.useCallback)(function (hours, minutes, ampm) {
    var date = (0, _Helpers.setDate)(new Date(), {
      hours: hours,
      minutes: minutes
    });

    if (typeof hours !== 'string') {
      hours = (0, _Helpers.formatDate)(date, 'HH');

      if (use12Hours) {
        hours = (0, _Helpers.formatDate)((0, _Helpers.setDate)(new Date(), {
          hours: hours
        }), 'hh');
      }
    }

    if (typeof minutes !== 'string') {
      minutes = (0, _Helpers.formatDate)(date, 'mm');
    }

    var value = ampm ? "".concat(hours, ":").concat(minutes, " ").concat(ampm) : "".concat(hours, ":").concat(minutes);
    set(value);
    return value;
  }, []);
  return [currentTime, setCurrentTime];
};

exports.useCurrentTime = useCurrentTime;

var useCalendarNavigation = function useCalendarNavigation(_ref3) {
  var daysSelected = _ref3.daysSelected,
      isOpen = _ref3.isOpen,
      onChangeMonth = _ref3.onChangeMonth,
      weeks = _ref3.weeks;

  var _useState7 = (0, _react.useState)(null),
      _useState8 = _slicedToArray(_useState7, 2),
      lastItemFocused = _useState8[0],
      setLastItemFocused = _useState8[1];

  var gridRef = (0, _react.useRef)(null);
  var lastKeyPressed = (0, _react.useRef)('');
  var hasNextFocus = (0, _react.useRef)(false);
  var focusNext = (0, _react.useCallback)(function (day) {
    if (!gridRef.current) {
      return;
    }

    var nextFocusElement = gridRef.current.querySelector("button[aria-label=\"".concat((0, _Helpers.setDate)(day.date, {
      hours: 12,
      milliseconds: 0,
      minutes: 0,
      seconds: 0
    }).toDateString(), "\"]"));
    nextFocusElement.focus();
    setLastItemFocused(String(day.date.getDate()));
  }, []);
  var onKeyDown = (0, _react.useCallback)(function (event) {
    switch (event.key) {
      case _shared.Keys.Down:
      case _shared.Keys.Up:
      case _shared.Keys.Right:
      case _shared.Keys.Left:
        {
          event.preventDefault();
          var currentRowPosition = Number(document.activeElement.closest('[role=row]').getAttribute('data-index'));
          var position = Number(document.activeElement.getAttribute('data-index'));
          var currentRow = weeks[currentRowPosition];
          var nextFocus = null;

          switch (event.key) {
            case _shared.Keys.Right:
            case _shared.Keys.Left:
              {
                nextFocus = currentRow[event.key === _shared.Keys.Left ? position - 1 : position + 1];

                if (!nextFocus) {
                  var _weeks;

                  nextFocus = (_weeks = weeks[event.key === _shared.Keys.Left ? currentRowPosition - 1 : currentRowPosition + 1]) === null || _weeks === void 0 ? void 0 : _weeks[event.key === _shared.Keys.Left ? currentRow.length - 1 : 0];
                }

                break;
              }

            case _shared.Keys.Up:
            case _shared.Keys.Down:
              {
                var _weeks2;

                nextFocus = (_weeks2 = weeks[event.key === _shared.Keys.Up ? currentRowPosition - 1 : currentRowPosition + 1]) === null || _weeks2 === void 0 ? void 0 : _weeks2[position];
                break;
              }

            default:
              break;
          }

          if (nextFocus && !nextFocus.nextMonth && !nextFocus.previousMonth) {
            focusNext(nextFocus);
          } else {
            onChangeMonth(event.key === _shared.Keys.Left || event.key === _shared.Keys.Up ? -1 : 1);
            lastKeyPressed.current = event.key;
            hasNextFocus.current = true;
          }

          break;
        }

      case _shared.Keys.End:
      case _shared.Keys.Home:
        {
          event.preventDefault();
          var grid = event.currentTarget.querySelectorAll('button:not(.previous-month-date):not(.next-month-date)');
          var day = grid[event.key === _shared.Keys.Home ? 0 : grid.length - 1];

          if (day) {
            day.focus();
            setLastItemFocused(day.innerText);
          }

          break;
        }

      case 'PageDown':
      case 'PageUp':
        {
          event.preventDefault();

          var _value = event.key === 'PageUp' ? -1 : 1;

          if (event.shiftKey) {
            onChangeMonth(0, _value);
          } else {
            onChangeMonth(_value);
          }

          lastKeyPressed.current = event.key;
          hasNextFocus.current = true;
          break;
        }

      default:
        break;
    }
  }, [weeks]);
  var onFocus = (0, _react.useCallback)(function (event) {
    setLastItemFocused(event.target.innerText);
  }, []);
  var isFocused = (0, _react.useCallback)(function (day) {
    return !day.nextMonth && !day.previousMonth && (lastItemFocused === String(day.date.getDate()) || lastItemFocused === null && day.date.toDateString() === daysSelected[0].toDateString());
  }, [lastItemFocused, daysSelected]); // Moves the focus to the cell when selected if it is not yet in focus.

  (0, _react.useEffect)(function () {
    if (gridRef.current && isOpen) {
      focusNext({
        date: daysSelected[0]
      });
    }
  }, [daysSelected]);
  (0, _react.useEffect)(function () {
    if (gridRef.current) {
      if (isOpen) {
        var _focusNext = gridRef.current.querySelector('button:not([tabindex="-1"])');

        if (_focusNext) {
          _focusNext.focus();
        }
      } else {
        setLastItemFocused(null);
      }
    }
  }, [isOpen]);
  (0, _react.useEffect)(function () {
    // Recalculates the focus position when changing the calendar month when
    // navigating via keyboard.
    if (hasNextFocus.current && gridRef.current) {
      hasNextFocus.current = false;
      var position = Number(document.activeElement.getAttribute('data-index'));
      var row = weeks[lastKeyPressed.current === _shared.Keys.Left || lastKeyPressed.current === _shared.Keys.Up ? weeks.length - 1 : 0];

      switch (lastKeyPressed.current) {
        case _shared.Keys.Right:
        case _shared.Keys.Left:
          {
            // Remaps the row to remove out-of-month dates for horizontal
            // navigation.
            var newRow = row.filter(function (value) {
              return !value.nextMonth && !value.previousMonth;
            });
            focusNext(newRow[lastKeyPressed.current === _shared.Keys.Left ? newRow.length - 1 : 0]);
            break;
          }

        case _shared.Keys.Down:
        case _shared.Keys.Up:
          {
            // Remap the row to remove dates outside the month but keep the
            // position to find the next element in the vertical navigation.
            var nextFocus = row.map(function (value) {
              return !value.nextMonth && !value.previousMonth ? value : null;
            })[position];

            if (!nextFocus) {
              nextFocus = weeks[lastKeyPressed.current === _shared.Keys.Up ? weeks.length - 2 : 1][position];
            }

            focusNext(nextFocus);
            break;
          }

        case 'PageDown':
        case 'PageUp':
          {
            var _focusNext2 = gridRef.current.querySelector('button:not([tabindex="-1"])');

            if (_focusNext2) {
              _focusNext2.focus();
            }

            break;
          }

        default:
          break;
      }

      lastKeyPressed.current = '';
    }
  }, [weeks]);
  var gridProps = {
    onFocus: onFocus,
    onKeyDown: onKeyDown,
    ref: gridRef
  };
  return {
    gridProps: gridProps,
    isFocused: isFocused
  };
};

exports.useCalendarNavigation = useCalendarNavigation;

function getDaysInMonth(d) {
  var firstDayOfMonth = new Date(d.getFullYear(), d.getMonth(), 1, 12);
  firstDayOfMonth.setMonth(firstDayOfMonth.getMonth() + 1);
  firstDayOfMonth.setDate(firstDayOfMonth.getDate() - 1);
  return firstDayOfMonth.getDate();
}
/**
 * Utility function to generate a table two days of the month.
 * Based on (This implementation does not have the fixation of
 * 6 weeks) https://github.com/gpbl/react-day-picker/blob/master/src/Helpers.js#L55
 *
 * @example
 * getWeekArray(new Date(), 0);
 *
 * [
 *   [
 *     {
 *       date: Sun Dec 30 2018 12:00:00 GMT-0300...
 *       nextMonth: false
 *       previousMonth: true
 * 	   },
 *     ...
 *   ]
 *   ...
 * ]
 *
 * The `outside` property references when a day
 * does not belong to the current month.
 */


function getWeekArray(d) {
  var firstDayOfWeek = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var daysInMonth = getDaysInMonth(d);
  var dayArray = [];
  var week = [];
  var weekArray = [];

  for (var i = 1; i <= daysInMonth; i += 1) {
    var genDay = new Date(d.getFullYear(), d.getMonth(), i, 12);
    dayArray.push({
      date: genDay
    });
  }

  dayArray.forEach(function (day) {
    if (week.length > 0 && day.date.getDay() === firstDayOfWeek) {
      weekArray.push(week);
      week = [];
    }

    week.push(day);

    if (dayArray.indexOf(day) === dayArray.length - 1) {
      weekArray.push(week);
    }
  }); // unshift days from start of the first week

  var firstWeek = weekArray[0];

  for (var _i2 = 7 - firstWeek.length; _i2 > 0; _i2 -= 1) {
    var outsideDate = (0, _Helpers.clone)(firstWeek[0].date);
    outsideDate.setDate(firstWeek[0].date.getDate() - 1);
    firstWeek.unshift({
      date: outsideDate,
      previousMonth: true
    });
  } // push days until the end of the last week


  var lastWeek = weekArray[weekArray.length - 1];

  for (var _i3 = lastWeek.length; _i3 < 7; _i3 += 1) {
    var _outsideDate = (0, _Helpers.clone)(lastWeek[lastWeek.length - 1].date);

    _outsideDate.setDate(lastWeek[lastWeek.length - 1].date.getDate() + 1);

    lastWeek.push({
      date: _outsideDate,
      nextMonth: true
    });
  }

  return weekArray;
}