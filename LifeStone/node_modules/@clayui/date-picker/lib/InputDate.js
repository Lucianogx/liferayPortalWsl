"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _form = require("@clayui/form");

var _react = _interopRequireDefault(require("react"));

var _excluded = ["ariaLabel", "inputName", "useNative", "value"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var ClayDatePickerInputDate = /*#__PURE__*/_react.default.forwardRef(function (_ref, ref) {
  var ariaLabel = _ref.ariaLabel,
      _ref$inputName = _ref.inputName,
      inputName = _ref$inputName === void 0 ? 'datePicker' : _ref$inputName,
      _ref$useNative = _ref.useNative,
      useNative = _ref$useNative === void 0 ? false : _ref$useNative,
      _ref$value = _ref.value,
      value = _ref$value === void 0 ? '' : _ref$value,
      otherProps = _objectWithoutProperties(_ref, _excluded);

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("input", {
    name: inputName,
    type: "hidden",
    value: value
  }), /*#__PURE__*/_react.default.createElement(_form.ClayInput, _extends({}, otherProps, {
    "aria-label": ariaLabel,
    insetAfter: !useNative,
    ref: ref,
    type: useNative ? 'date' : 'text',
    value: value
  })));
});

ClayDatePickerInputDate.displayName = 'ClayDatePickerInputDate';
var _default = ClayDatePickerInputDate;
exports.default = _default;