"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _timePicker = _interopRequireDefault(require("@clayui/time-picker"));

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var DEFAULT_VALUE = '--';

var ClayDatePickerTimePicker = function ClayDatePickerTimePicker(_ref) {
  var currentTime = _ref.currentTime,
      disabled = _ref.disabled,
      onTimeChange = _ref.onTimeChange,
      spritemap = _ref.spritemap,
      timezone = _ref.timezone,
      use12Hours = _ref.use12Hours;

  var _React$useState = _react.default.useState({
    ampm: DEFAULT_VALUE,
    hours: DEFAULT_VALUE,
    minutes: DEFAULT_VALUE
  }),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      values = _React$useState2[0],
      setValues = _React$useState2[1];
  /**
   * Handles the control time picker
   */


  var handleOnChange = function handleOnChange(values) {
    var hours = values.hours === DEFAULT_VALUE ? DEFAULT_VALUE : Number(values.hours);
    var minutes = values.minutes === DEFAULT_VALUE ? DEFAULT_VALUE : Number(values.minutes);
    var ampm = values.ampm ? values.ampm : DEFAULT_VALUE;
    setValues(values);
    onTimeChange(hours, minutes, ampm);
  };

  _react.default.useEffect(function () {
    var _currentTime$split = currentTime.split(':'),
        _currentTime$split2 = _slicedToArray(_currentTime$split, 2),
        hours = _currentTime$split2[0],
        minutesAndAmpm = _currentTime$split2[1];

    var _minutesAndAmpm$split = minutesAndAmpm.split(' '),
        _minutesAndAmpm$split2 = _slicedToArray(_minutesAndAmpm$split, 2),
        minutes = _minutesAndAmpm$split2[0],
        ampm = _minutesAndAmpm$split2[1];

    setValues(function (prevValues) {
      return _objectSpread(_objectSpread({}, prevValues), {}, {
        ampm: ampm,
        hours: String(hours),
        minutes: String(minutes)
      });
    });
  }, [currentTime, use12Hours]);

  return /*#__PURE__*/_react.default.createElement("div", {
    className: "time-picker"
  }, /*#__PURE__*/_react.default.createElement(_timePicker.default, {
    disabled: disabled,
    icon: true,
    onInputChange: handleOnChange,
    spritemap: spritemap,
    timezone: timezone,
    use12Hours: use12Hours,
    values: values
  }));
};

var _default = ClayDatePickerTimePicker;
exports.default = _default;