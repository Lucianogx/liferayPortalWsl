/**
 * SPDX-FileCopyrightText: Â© 2019 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: BSD-3-Clause
 */
import { InternalDispatch } from '@clayui/shared';
import React from 'react';
import { FirstDayOfWeek, IAriaLabels, IYears } from './types';
interface IProps extends Omit<React.HTMLAttributes<HTMLInputElement>, 'onChange'> {
    /**
     * Labels for the aria attributes
     */
    ariaLabels?: IAriaLabels;
    /**
     * Set the format of how the date will appear in the input element.
     * See available: https://date-fns.org/v2.14.0/docs/format
     */
    dateFormat?: string;
    /**
     * Property to set if expanded by default (uncontrolled).
     */
    defaultExpanded?: boolean;
    /**
     * The start date to be displayed on the calendar as "Today". Used to mark
     * the start date of the day and when resetting.
     */
    defaultMonth?: Date;
    /**
     * Property to set the default value (uncontrolled).
     */
    defaultValue?: string;
    /**
     * Flag to disable the component, buttons, open the datepicker, etc...
     */
    disabled?: boolean;
    /**
     * Determines if menu is expanded or not (controlled).
     */
    expanded?: boolean;
    /**
     * Set the first day of the week, starting from
     * 0 (Sunday) to 6 (Saturday).
     */
    firstDayOfWeek?: FirstDayOfWeek;
    /**
     * Function that should return the React element to
     * render on the datepicker footer.
     */
    footerElement?: (object: {
        spritemap?: string;
    }) => React.ReactNode;
    /**
     * Id to be applied to the element.
     */
    id?: string;
    /**
     * Flag to indicate if date is initially expanded when
     * `expand` and `onExpandChange` are not being used.
     * @deprecated since v3.51.0 - use `defaultExpanded` instead.
     */
    initialExpanded?: boolean;
    /**
     * The start date to be displayed on the calendar as "Today". Used to mark
     * the start date of the day and when resetting.
     * @deprecated since v3.51.0 - use `defaultMonth` instead.
     */
    initialMonth?: Date;
    /**
     * Name of the input.
     */
    inputName?: string;
    /**
     * The names of the months.
     */
    months?: Array<string>;
    /**
     * Callback that is called when the value changes (controlled).
     */
    onChange?: InternalDispatch<string>;
    /**
     * Callback for when dropdown changes its expanded state (controlled).
     */
    onExpandedChange?: InternalDispatch<boolean>;
    /**
     * Called when the user is browsing the date picker, changing the
     * month, year and navigating with arrows.
     */
    onNavigation?: (data: Date) => void;
    /**
     * Called when the input change.
     *
     * Second argument gives the type that caused the value change
     * @deprecated since v3.51.0 - use `onChange` instead.
     */
    onValueChange?: InternalDispatch<string>;
    /**
     * Describe a brief tip to help users interact.
     */
    placeholder?: string;
    /** *
     * Flag to indicate the user will use the date-range date-picker
     */
    range?: boolean;
    /**
     * Path to the location of the spritemap resource.
     */
    spritemap?: string;
    /**
     * Flag to enable datetime selection.
     */
    time?: boolean;
    /**
     * Flag to indicate the timezone of the Time Picker.
     */
    timezone?: string;
    /**
     * Flag to indicate if 12-hour use, when true, should show am/pm input.
     */
    use12Hours?: boolean;
    /**
     * Flag to indicate whether to use native date picker
     */
    useNative?: boolean;
    /**
     * The value property sets the current value (controlled).
     */
    value?: string;
    /**
     * Short names of days of the week to use in the header
     * of the month. It should start from Sunday.
     */
    weekdaysShort?: Array<string>;
    /**
     * List of years available for navigation within the selector.
     */
    years?: IYears;
    /**
     * Flag to indicate whether the DatePicker should validate if the year
     * is included in the range of years. Disable only if your range is dynamic.
     */
    yearsCheck?: boolean;
}
/**
 * ClayDatePicker component.
 */
declare const ClayDatePicker: React.ForwardRefExoticComponent<IProps & React.RefAttributes<HTMLInputElement>>;
export { FirstDayOfWeek };
export default ClayDatePicker;
