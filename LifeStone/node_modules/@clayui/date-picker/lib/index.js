"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "FirstDayOfWeek", {
  enumerable: true,
  get: function get() {
    return _types.FirstDayOfWeek;
  }
});
exports.default = void 0;

var _button = _interopRequireDefault(require("@clayui/button"));

var _dropDown = _interopRequireDefault(require("@clayui/drop-down"));

var _form = require("@clayui/form");

var _icon = _interopRequireDefault(require("@clayui/icon"));

var _shared = require("@clayui/shared");

var _react = _interopRequireWildcard(require("react"));

var _DateNavigation = _interopRequireDefault(require("./DateNavigation"));

var _DayNumber = _interopRequireDefault(require("./DayNumber"));

var _DaysTable = _interopRequireDefault(require("./DaysTable"));

var _Helpers = require("./Helpers");

var _Hooks = require("./Hooks");

var _InputDate = _interopRequireDefault(require("./InputDate"));

var _TimePicker = _interopRequireDefault(require("./TimePicker"));

var _Weekday = _interopRequireDefault(require("./Weekday"));

var _WeekdayHeader = _interopRequireDefault(require("./WeekdayHeader"));

var _types = require("./types");

var _excluded = ["ariaLabels", "dateFormat", "defaultExpanded", "defaultMonth", "defaultValue", "disabled", "expanded", "firstDayOfWeek", "footerElement", "id", "initialExpanded", "initialMonth", "inputName", "months", "onChange", "onExpandedChange", "onNavigation", "onValueChange", "placeholder", "range", "spritemap", "time", "timezone", "use12Hours", "useNative", "value", "weekdaysShort", "years", "yearsCheck"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var DEFAULT_DATE_TIME = {
  hours: 12,
  milliseconds: 0,
  minutes: 0,
  seconds: 0
};
var NEW_DATE = new Date();
var TIME_FORMAT = 'HH:mm';
var TIME_FORMAT_12H = 'hh:mm aa';

var normalizeTime = function normalizeTime(date) {
  return (0, _Helpers.setDate)(date, {
    hours: 12,
    milliseconds: 0,
    minutes: 0,
    seconds: 0
  });
};
/**
 * ClayDatePicker component.
 */


var ClayDatePicker = /*#__PURE__*/_react.default.forwardRef(function (_ref, ref) {
  var _ref$ariaLabels = _ref.ariaLabels,
      ariaLabels = _ref$ariaLabels === void 0 ? {
    buttonChooseDate: 'Choose date',
    buttonDot: 'Select current date',
    buttonNextMonth: 'Select the next month',
    buttonPreviousMonth: 'Select the previous month',
    dialog: 'Choose date'
  } : _ref$ariaLabels,
      _ref$dateFormat = _ref.dateFormat,
      dateFormat = _ref$dateFormat === void 0 ? 'yyyy-MM-dd' : _ref$dateFormat,
      defaultExpanded = _ref.defaultExpanded,
      defaultMonth = _ref.defaultMonth,
      defaultValue = _ref.defaultValue,
      disabled = _ref.disabled,
      expanded = _ref.expanded,
      _ref$firstDayOfWeek = _ref.firstDayOfWeek,
      firstDayOfWeek = _ref$firstDayOfWeek === void 0 ? _types.FirstDayOfWeek.Sunday : _ref$firstDayOfWeek,
      footerElement = _ref.footerElement,
      id = _ref.id,
      _ref$initialExpanded = _ref.initialExpanded,
      initialExpanded = _ref$initialExpanded === void 0 ? false : _ref$initialExpanded,
      _ref$initialMonth = _ref.initialMonth,
      initialMonth = _ref$initialMonth === void 0 ? NEW_DATE : _ref$initialMonth,
      inputName = _ref.inputName,
      _ref$months = _ref.months,
      months = _ref$months === void 0 ? ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'] : _ref$months,
      onChange = _ref.onChange,
      onExpandedChange = _ref.onExpandedChange,
      _ref$onNavigation = _ref.onNavigation,
      onNavigation = _ref$onNavigation === void 0 ? function () {} : _ref$onNavigation,
      onValueChange = _ref.onValueChange,
      placeholder = _ref.placeholder,
      range = _ref.range,
      spritemap = _ref.spritemap,
      _ref$time = _ref.time,
      time = _ref$time === void 0 ? false : _ref$time,
      timezone = _ref.timezone,
      _ref$use12Hours = _ref.use12Hours,
      use12Hours = _ref$use12Hours === void 0 ? false : _ref$use12Hours,
      _ref$useNative = _ref.useNative,
      useNative = _ref$useNative === void 0 ? false : _ref$useNative,
      value = _ref.value,
      _ref$weekdaysShort = _ref.weekdaysShort,
      weekdaysShort = _ref$weekdaysShort === void 0 ? ['S', 'M', 'T', 'W', 'T', 'F', 'S'] : _ref$weekdaysShort,
      _ref$years = _ref.years,
      years = _ref$years === void 0 ? {
    end: NEW_DATE.getFullYear(),
    start: NEW_DATE.getFullYear()
  } : _ref$years,
      _ref$yearsCheck = _ref.yearsCheck,
      yearsCheck = _ref$yearsCheck === void 0 ? true : _ref$yearsCheck,
      otherProps = _objectWithoutProperties(_ref, _excluded);

  // For backward compatibility `defaultMonth` is just an alias for
  // `initialMonth`.
  initialMonth = defaultMonth !== null && defaultMonth !== void 0 ? defaultMonth : initialMonth;

  var _useInternalState = (0, _shared.useInternalState)({
    defaultName: 'defaultValue',
    defaultValue: defaultValue,
    handleName: 'onChange',
    name: 'value',
    onChange: onChange !== null && onChange !== void 0 ? onChange : onValueChange,
    value: value
  }),
      _useInternalState2 = _slicedToArray(_useInternalState, 3),
      internalValue = _useInternalState2[0],
      setValue = _useInternalState2[1],
      isUncontrolled = _useInternalState2[2];
  /**
   * DaysSelected is a tuple that represents [startDate, endDate]
   * in the cases where We have a date range and when `range` property
   * is disabled we will just use the first element of the tuple(startDate)
   */


  var _useDaysSelected = (0, _Hooks.useDaysSelected)(function () {
    if (internalValue) {
      var days = hasDaysSelected({
        checkRangeYears: yearsCheck,
        dateFormat: dateFormat,
        is12Hours: use12Hours,
        isTime: time,
        value: internalValue,
        years: years
      });

      if (days) {
        return [normalizeTime(days[0]), normalizeTime(days[1])];
      }
    }

    var date = normalizeTime(initialMonth);
    return [date, date];
  }),
      _useDaysSelected2 = _slicedToArray(_useDaysSelected, 2),
      daysSelected = _useDaysSelected2[0],
      setDaysSelected = _useDaysSelected2[1];
  /**
   * Indicates the current month rendered on the screen.
   */


  var _useState = (0, _react.useState)(function () {
    return (// Normalize the date to always set noon to avoid time zone problems
      // and to the 1st of the month.
      (0, _Helpers.setDate)(daysSelected[0], _objectSpread({
        date: 1
      }, DEFAULT_DATE_TIME))
    );
  }),
      _useState2 = _slicedToArray(_useState, 2),
      currentMonth = _useState2[0],
      setCurrentMonth = _useState2[1];

  var chooseDateRef = (0, _react.useRef)(null);
  /**
   * Indicates the time selected by the user.
   */

  var _useCurrentTime = (0, _Hooks.useCurrentTime)(function () {
    if (time && internalValue) {
      var _fromStringToRange = fromStringToRange(internalValue, "".concat(dateFormat, " ").concat(use12Hours ? TIME_FORMAT_12H : TIME_FORMAT), NEW_DATE),
          _fromStringToRange2 = _slicedToArray(_fromStringToRange, 1),
          startDate = _fromStringToRange2[0];

      if (startDate.toString() !== 'Invalid Date') {
        var hours = use12Hours ? (0, _Helpers.formatDate)(startDate, 'HH') : (0, _Helpers.formatDate)(startDate, 'hh');
        var minutes = (0, _Helpers.formatDate)(startDate, 'mm');
        return use12Hours ? "".concat(hours, ":").concat(minutes, " ").concat((0, _Helpers.formatDate)(startDate, 'a')) : "".concat(hours, ":").concat(minutes);
      }
    }

    return '--:--';
  }, use12Hours),
      _useCurrentTime2 = _slicedToArray(_useCurrentTime, 2),
      currentTime = _useCurrentTime2[0],
      setCurrentTime = _useCurrentTime2[1];
  /**
   * An array of the weeks and days list for the current month
   */


  var _useWeeks = (0, _Hooks.useWeeks)(currentMonth, firstDayOfWeek),
      _useWeeks2 = _slicedToArray(_useWeeks, 2),
      weeks = _useWeeks2[0],
      setWeeks = _useWeeks2[1];
  /**
   * Flag to indicate if date is expanded. Uses an internal state value
   * if component is not controlled by props.
   */


  var _useInternalState3 = (0, _shared.useInternalState)({
    defaultName: 'defaultExpanded',
    defaultValue: defaultExpanded === undefined ? initialExpanded : defaultExpanded,
    handleName: 'onExpandedChange',
    name: 'expanded',
    onChange: onExpandedChange,
    value: expanded
  }),
      _useInternalState4 = _slicedToArray(_useInternalState3, 2),
      expandedValue = _useInternalState4[0],
      setExpandedValue = _useInternalState4[1];
  /**
   * Create a ref to store the datepicker DOM element
   */


  var triggerElementRef = (0, _react.useRef)(null);
  /**
   * Handles the change of the current month of the Date Picker
   * content and takes care of updating the weeks.
   */

  var changeMonth = function changeMonth(date) {
    var dateNormalized = (0, _Helpers.setDate)(date, _objectSpread({
      date: 1
    }, DEFAULT_DATE_TIME));
    setCurrentMonth(dateNormalized);
    onNavigation(dateNormalized); // It is not necessary to update the weeks when the native
    // date is enabled. Unnecessary rendering and processing.

    if (!useNative) {
      setWeeks(dateNormalized);
    }
  };

  var memoizedYears = (0, _react.useMemo)(function () {
    return (0, _Helpers.range)(years).map(function (elem) {
      return {
        label: elem,
        value: elem
      };
    });
  }, [years]);
  var memoizedMonths = (0, _react.useMemo)(function () {
    return months.map(function (month, index) {
      return {
        label: month,
        value: index
      };
    });
  }, [months]);
  /**
   * Handles the click on element of the day
   */

  var handleDayClicked = function handleDayClicked(date) {
    var _daysSelected = _slicedToArray(daysSelected, 2),
        startDate = _daysSelected[0],
        endDate = _daysSelected[1];

    var newDaysSelected;
    var daysSelectedToString;

    if (range) {
      if (startDate.toString() !== endDate.toString()) {
        newDaysSelected = [date, date];
      } else if (date < startDate) {
        newDaysSelected = [date, endDate];
      } else {
        newDaysSelected = [startDate, date];
      }

      daysSelectedToString = fromRangeToString(newDaysSelected, dateFormat);

      var _newDaysSelected = newDaysSelected,
          _newDaysSelected2 = _slicedToArray(_newDaysSelected, 2),
          newStartDate = _newDaysSelected2[0],
          newEndDate = _newDaysSelected2[1];

      if (newStartDate.getMonth() !== newEndDate.getMonth()) {
        changeMonth(startDate);
      }
    } else {
      newDaysSelected = [date, date];
      daysSelectedToString = (0, _Helpers.formatDate)(date, dateFormat);

      if (time) {
        daysSelectedToString = "".concat(daysSelectedToString, " ").concat(currentTime);
      }
    }

    setDaysSelected(newDaysSelected);
    setValue(daysSelectedToString);
  };

  var updateDate = (0, _react.useCallback)(function (value) {
    if (!value) {
      changeMonth(initialMonth);
      setDaysSelected([initialMonth, initialMonth]);

      if (time) {
        setCurrentTime('--', '--', undefined);
      }
    } else {
      var days = hasDaysSelected({
        checkRangeYears: yearsCheck,
        dateFormat: dateFormat,
        is12Hours: use12Hours,
        isTime: time,
        value: value,
        years: years
      });

      if (days) {
        var _days = _slicedToArray(days, 2),
            startDate = _days[0],
            endDate = _days[1];

        changeMonth(startDate);
        setDaysSelected([startDate, endDate]);

        if (time) {
          setCurrentTime(startDate.getHours(), startDate.getMinutes(), use12Hours ? (0, _Helpers.formatDate)(startDate, 'a') : undefined);
        }
      }
    }
  }, []);
  /**
   * Control the value of the input propagating with the call
   * of `onChange` but does not change what the user types,
   * if a date is valid the month of the Date Picker is changed.
   */

  var inputChange = function inputChange(event) {
    var value = event.target.value;
    updateDate(value);
    setValue(value);
  };

  (0, _react.useEffect)(function () {
    if (!isUncontrolled) {
      updateDate(internalValue);
    }
  }, [isUncontrolled, internalValue]);
  /**
   * Changes selected date to the current date. The same happens when there
   * is no date selected.
   */

  var handleDotClicked = function handleDotClicked() {
    var _daysSelected2 = _slicedToArray(daysSelected, 2),
        endDate = _daysSelected2[1];

    changeMonth(initialMonth);
    var newDaysSelected = range && endDate < initialMonth ? [endDate, initialMonth] : [initialMonth, endDate];
    var dateFormatted;

    if (range) {
      dateFormatted = fromRangeToString(newDaysSelected, dateFormat);
    } else if (time) {
      dateFormatted = "".concat((0, _Helpers.formatDate)(initialMonth, dateFormat), " ").concat(setCurrentTime(initialMonth.getHours(), initialMonth.getMinutes(), use12Hours ? (0, _Helpers.formatDate)(initialMonth, 'a') : undefined));
    } else {
      dateFormatted = (0, _Helpers.formatDate)(initialMonth, dateFormat);
    }

    setDaysSelected(newDaysSelected);
    setValue(dateFormatted);
  };

  var handleTimeChange = function handleTimeChange(hours, minutes, ampm) {
    var _daysSelected3 = _slicedToArray(daysSelected, 1),
        day = _daysSelected3[0];

    if (hours === '--' && typeof minutes === 'number') {
      hours = 0;
    }

    if (minutes === '--' && typeof hours === 'number') {
      minutes = 0;
    }

    if (internalValue) {
      var date = typeof hours === 'string' && typeof minutes === 'string' ? "".concat((0, _Helpers.formatDate)(day, dateFormat), " ").concat(hours, ":").concat(minutes) : (0, _Helpers.formatDate)((0, _Helpers.setDate)(day, {
        hours: hours,
        minutes: minutes
      }), "".concat(dateFormat, " ").concat(TIME_FORMAT));

      if (use12Hours) {
        date += " ".concat(ampm);
      }

      setValue(date);
    }

    setCurrentTime(hours, minutes, use12Hours ? ampm : undefined);
  };
  /**
   * Handles datepicker view
   */


  var handleCalendarButtonClicked = function handleCalendarButtonClicked() {
    return setExpandedValue(!expandedValue);
  };

  var calendarNavigation = (0, _Hooks.useCalendarNavigation)({
    daysSelected: daysSelected,
    isOpen: expandedValue,
    onChangeMonth: function onChangeMonth(month, year) {
      if (typeof year === 'number') {
        changeMonth((0, _Helpers.setDate)(currentMonth, {
          year: currentMonth.getFullYear() + year
        }));
      } else {
        var date = (0, _Helpers.setMonth)(memoizedYears, month, currentMonth);

        if (date) {
          changeMonth(date);
        }
      }
    },
    weeks: weeks
  });
  var ariaControls = (0, _shared.useId)();
  return /*#__PURE__*/_react.default.createElement(_shared.FocusScope, {
    arrowKeysUpDown: false
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "date-picker"
  }, /*#__PURE__*/_react.default.createElement(_form.ClayInput.Group, {
    ref: triggerElementRef
  }, /*#__PURE__*/_react.default.createElement(_form.ClayInput.GroupItem, null, /*#__PURE__*/_react.default.createElement(_InputDate.default, _extends({}, otherProps, {
    ariaLabel: ariaLabels.input,
    disabled: disabled,
    id: id,
    inputName: inputName,
    onChange: inputChange,
    placeholder: placeholder,
    ref: ref,
    useNative: useNative,
    value: internalValue
  })), !useNative && /*#__PURE__*/_react.default.createElement(_form.ClayInput.GroupInsetItem, {
    after: true
  }, /*#__PURE__*/_react.default.createElement(_button.default, {
    "aria-controls": ariaControls,
    "aria-expanded": expandedValue,
    "aria-haspopup": "dialog",
    "aria-label": ariaLabels.buttonChooseDate,
    className: "date-picker-dropdown-toggle",
    disabled: disabled,
    displayType: "unstyled",
    onClick: handleCalendarButtonClicked,
    ref: chooseDateRef
  }, /*#__PURE__*/_react.default.createElement(_icon.default, {
    spritemap: spritemap,
    symbol: "calendar"
  }))))), !useNative && /*#__PURE__*/_react.default.createElement(_dropDown.default.Menu, {
    active: expandedValue,
    alignElementRef: triggerElementRef,
    "aria-label": ariaLabels.dialog,
    className: "date-picker-dropdown-menu",
    id: ariaControls,
    lock: true,
    onActiveChange: setExpandedValue,
    role: "dialog",
    triggerRef: chooseDateRef
  }, /*#__PURE__*/_react.default.createElement("div", {
    "aria-label": (0, _Helpers.formatDate)(currentMonth, 'MMMM yyyy'),
    className: "date-picker-calendar",
    role: "group"
  }, /*#__PURE__*/_react.default.createElement(_DateNavigation.default, {
    ariaLabels: ariaLabels,
    currentMonth: currentMonth,
    disabled: disabled,
    months: memoizedMonths,
    onDotClicked: handleDotClicked,
    onMonthChange: changeMonth,
    spritemap: spritemap,
    years: memoizedYears
  }), /*#__PURE__*/_react.default.createElement("div", _extends({}, calendarNavigation.gridProps, {
    className: "date-picker-calendar-body",
    role: "grid"
  }), /*#__PURE__*/_react.default.createElement(_WeekdayHeader.default, {
    firstDayOfWeek: firstDayOfWeek,
    weekdaysShort: weekdaysShort
  }, function (_ref2) {
    var key = _ref2.key,
        weekday = _ref2.weekday;
    return /*#__PURE__*/_react.default.createElement(_Weekday.default, {
      key: key,
      weekday: weekday
    });
  }), /*#__PURE__*/_react.default.createElement(_DaysTable.default, {
    weeks: weeks
  }, function (_ref3) {
    var day = _ref3.day,
        key = _ref3.key;
    return /*#__PURE__*/_react.default.createElement(_DayNumber.default, {
      day: day,
      daysSelected: daysSelected,
      disabled: disabled,
      index: key,
      isFocused: calendarNavigation.isFocused(day),
      key: key,
      onClick: handleDayClicked,
      range: range
    });
  })), (footerElement || time) && /*#__PURE__*/_react.default.createElement("div", {
    className: "date-picker-calendar-footer"
  }, time && /*#__PURE__*/_react.default.createElement(_TimePicker.default, {
    currentTime: currentTime,
    disabled: disabled,
    onTimeChange: handleTimeChange,
    spritemap: spritemap,
    timezone: timezone,
    use12Hours: use12Hours
  }), !time && footerElement && _react.default.Children.only(footerElement({
    spritemap: spritemap
  })))))));
});

var RANGE_SEPARATOR = ' - ';

function isYearWithinYears(year, years) {
  return years.start <= year && year <= years.end;
}

function fromStringToRange(value, dateFormat, referenceDate) {
  var _value$split = value.split(RANGE_SEPARATOR),
      _value$split2 = _slicedToArray(_value$split, 2),
      startDateString = _value$split2[0],
      endDateString = _value$split2[1];

  var startDate = (0, _Helpers.parseDate)(startDateString, dateFormat, referenceDate);
  return [startDate, endDateString ? (0, _Helpers.parseDate)(endDateString, dateFormat, referenceDate) : startDate];
}

function hasDaysSelected(_ref4) {
  var checkRangeYears = _ref4.checkRangeYears,
      dateFormat = _ref4.dateFormat,
      is12Hours = _ref4.is12Hours,
      isTime = _ref4.isTime,
      value = _ref4.value,
      years = _ref4.years;

  var _fromStringToRange3 = fromStringToRange(value, isTime ? "".concat(dateFormat, " ").concat(is12Hours ? TIME_FORMAT_12H : TIME_FORMAT) : dateFormat, NEW_DATE),
      _fromStringToRange4 = _slicedToArray(_fromStringToRange3, 2),
      startDate = _fromStringToRange4[0],
      endDate = _fromStringToRange4[1];

  var isValidYear = checkRangeYears ? isYearWithinYears(startDate.getFullYear(), years) && isYearWithinYears(endDate.getFullYear(), years) : true;

  if ((0, _Helpers.isValid)(startDate) && (0, _Helpers.isValid)(endDate) && isValidYear) {
    return [startDate, endDate];
  }
}

function fromRangeToString(range, dateFormat) {
  var _range = _slicedToArray(range, 2),
      startDate = _range[0],
      endDate = _range[1];

  return "".concat((0, _Helpers.formatDate)(startDate, dateFormat)).concat(RANGE_SEPARATOR).concat((0, _Helpers.formatDate)(endDate, dateFormat));
}

ClayDatePicker.displayName = 'ClayDatePicker';
var _default = ClayDatePicker;
exports.default = _default;