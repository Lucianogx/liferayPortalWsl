/**
 * SPDX-FileCopyrightText: Â© 2019 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: BSD-3-Clause
 */
import React from 'react';
declare const ClayLabelItemExpand: React.ForwardRefExoticComponent<React.BaseHTMLAttributes<HTMLAnchorElement | HTMLSpanElement> & React.RefAttributes<HTMLAnchorElement | HTMLSpanElement>>;
declare type DisplayType = 'secondary' | 'info' | 'warning' | 'danger' | 'success' | 'unstyled';
interface IBaseProps extends React.BaseHTMLAttributes<HTMLSpanElement> {
    /**
     * Flag to indicate if `label-dismissible` class should be applied.
     */
    dismissible?: boolean;
    /**
     * Determines the style of the label.
     */
    displayType?: DisplayType;
    /**
     * Flag to indicate if the label should be of the `large` variant.
     */
    large?: boolean;
}
interface IProps extends IBaseProps {
    /**
     * HTML properties that are applied to the 'x' button.
     */
    closeButtonProps?: React.ButtonHTMLAttributes<HTMLButtonElement> & {
        ref?: (instance: HTMLButtonElement | null) => void;
    };
    /**
     * Pros to add to the inner label item
     */
    innerElementProps?: React.ComponentProps<typeof ClayLabelItemExpand>;
    /**
     * Path to the location of the spritemap resource used for Icon.
     */
    spritemap?: string;
    /**
     * Flag to indicate if component should include the close button
     */
    withClose?: boolean;
}
declare const _default: React.ForwardRefExoticComponent<IProps & React.RefAttributes<HTMLAnchorElement | HTMLSpanElement>> & {
    ItemAfter: React.ForwardRefExoticComponent<React.HTMLAttributes<HTMLSpanElement> & React.RefAttributes<HTMLSpanElement>>;
    ItemBefore: React.ForwardRefExoticComponent<React.HTMLAttributes<HTMLSpanElement> & React.RefAttributes<HTMLSpanElement>>;
    ItemExpand: React.ForwardRefExoticComponent<React.BaseHTMLAttributes<HTMLAnchorElement | HTMLSpanElement> & React.RefAttributes<HTMLAnchorElement | HTMLSpanElement>>;
};
export default _default;
