/**
 * SPDX-FileCopyrightText: Â© 2020 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: BSD-3-Clause
 */
import React from 'react';
interface IItem {
    label: string;
    symbol: string;
}
interface ITranslations {
    [key: string]: string;
}
interface IProps extends React.InputHTMLAttributes<HTMLInputElement> {
    /**
     * Labels for the aria attributes
     */
    ariaLabels?: {
        default: string;
        openLocalizations: string;
        translated: string;
        untranslated: string;
    };
    /**
     * Add informational text at the top of Localized Input.
     */
    helpText?: React.ReactText;
    /**
     * Label of the input
     */
    label?: React.ReactText;
    /**
     * Content to be prepended in case you want to localize a URL.
     */
    prependContent?: React.ReactText;
    /**
     * List of locales to allow localization for
     */
    locales: Array<IItem>;
    /**
     * Callback that gets called when a selected locale gets changed
     */
    onSelectedLocaleChange: (val: IItem) => void;
    /**
     * Callback that gets called when a translation of the selected locale gets changed
     */
    onTranslationsChange: (val: ITranslations) => void;
    /**
     * Allows specifying custom formatter, for example for formatting URLs, to be output after translating
     */
    resultFormatter?: (val: string) => React.ReactNode;
    /**
     * Exposes the currently selected locale
     */
    selectedLocale: IItem;
    /**
     * Path to the location of the spritemap resource.
     */
    spritemap?: string;
    /**
     * Translations provided to the component to be used and modified by it
     */
    translations: ITranslations;
}
declare const ClayLocalizedInput: React.ForwardRefExoticComponent<IProps & React.RefAttributes<HTMLInputElement>>;
export default ClayLocalizedInput;
