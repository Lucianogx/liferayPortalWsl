/**
 * SPDX-FileCopyrightText: Â© 2019 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: BSD-3-Clause
 */
import { InternalDispatch } from '@clayui/shared';
import React from 'react';
declare type Item = {
    [propName: string]: any;
    /**
     * Label to show.
     */
    label?: string;
    /**
     * Global unique id of the item list. Generated by the component.
     */
    key?: string;
    /**
     * Hidden value of the item.
     */
    value?: string;
};
declare type Locator = {
    id?: string;
    label: string;
    value: string;
};
declare type Size = null | 'sm';
interface IMenuRendererProps {
    /**
     * Value of input
     * * @deprecated since v3.49.0 - use `value` instead.
     */
    inputValue: string;
    locator: Locator;
    onItemClick?: (item: Item) => void;
    sourceItems: Array<Item>;
    /**
     * The value property sets the current value (controlled).
     */
    value: string;
}
declare type MenuRenderer = (props: IMenuRendererProps) => JSX.Element;
export interface IProps extends Omit<React.HTMLAttributes<HTMLInputElement>, 'onChange'> {
    /**
     * Whether MultiSelect allows an input value not corresponding to an item
     * to be added.
     */
    allowsCustomLabel?: boolean;
    /**
     * Flag to align the Autocomplete within the viewport.
     */
    alignmentByViewport?: boolean;
    /**
     * Title for the `Clear All` button.
     */
    clearAllTitle?: string;
    /**
     * Aria label for the Close button of the labels.
     */
    closeButtonAriaLabel?: string;
    /**
     * Property to set the default value (uncontrolled).
     */
    defaultValue?: string;
    /**
     * Set the default value of label items (uncontrolled).
     */
    defaultItems?: Array<Item>;
    /**
     * Adds a component to replace the default component that renders
     * the content of the `<ClayDropDown />` component.
     */
    menuRenderer?: MenuRenderer;
    /**
     * Flag that indicates to disable all features of the component.
     */
    disabled?: boolean;
    /**
     * Flag to disabled Clear All functionality.
     */
    disabledClearAll?: boolean;
    /**
     * Defines the description of hotkeys for the component, use this
     * to handle internationalization.
     */
    hotkeysDescription?: string;
    /**
     * Value used for each selected item's hidden input name attribute
     */
    inputName?: string;
    /**
     * Value of input
     * * @deprecated since v3.49.0 - use `value` instead.
     */
    inputValue?: string;
    /**
     * Flag to indicate if loading icon should be rendered
     */
    isLoading?: boolean;
    /**
     * Flag to indicate if input is valid or not
     */
    isValid?: boolean;
    /**
     * Values that display as label items (controlled).
     */
    items: Array<Item>;
    /**
     * The off-screen live region informs screen reader users the result of
     * removing or adding a label.
     */
    liveRegion?: {
        added: string;
        removed: string;
    };
    /**
     * Sets the name of the field to map the value/label of the item
     */
    locator?: Locator;
    /**
     * Callback for when the clear all button is clicked
     */
    onClearAllButtonClick?: () => void;
    /**
     * Callback for when the input value changes (controlled).
     */
    onChange?: InternalDispatch<string>;
    /**
     * Callback for when items are added or removed (controlled).
     */
    onItemsChange: InternalDispatch<Array<Item>>;
    /**
     * Determines the size of the Multi Select component.
     */
    size?: Size;
    /**
     * List of pre-populated items that will show up in a dropdown menu
     */
    sourceItems?: Array<Item>;
    /**
     * Path to spritemap for clay icons
     */
    spritemap?: string;
    /**
     * The value property sets the current value (controlled).
     */
    value?: string;
}
declare const ClayMultiSelect: React.ForwardRefExoticComponent<IProps & React.RefAttributes<HTMLDivElement>>;
/**
 * Utility used for filtering an array of items based off the locator which
 * is set to `label` by default.
 */
export declare const itemLabelFilter: (items: Array<Item>, value: string, locator?: string) => Item[];
export default ClayMultiSelect;
