/**
 * SPDX-FileCopyrightText: Â© 2019 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: BSD-3-Clause
 */
import React from 'react';
import Nav from './Nav';
import Trigger from './Trigger';
interface IItem extends React.ComponentProps<typeof Nav.Item> {
    /**
     * Flag to indicate if item is active.
     */
    active?: boolean;
    /**
     * Callback for when item is clicked.
     */
    onClick?: () => void;
    /**
     * Link href for item.
     */
    href?: string;
    /**
     * Value of item.
     */
    label?: string | React.ReactNode;
}
interface IItemWithItems extends IItem {
    /**
     * Flag to indicate if nested items are expanded and shown.
     */
    initialExpanded?: boolean;
    /**
     * List of nested items under current item.
     */
    items?: Array<IItem>;
}
export interface IProps {
    /**
     * Flag to define if the item represents the current page. Disable this
     * attribute only if there are multiple navigations on the page.
     */
    itemAriaCurrent?: boolean;
    /**
     * Flag to indicate the navigation behavior in the menu.
     *
     * - manual - it will just move the focus and menu activation is done just
     * by pressing space or enter.
     * - automatic - moves the focus to the menuitem and activates the menu.
     */
    activation?: 'manual' | 'automatic';
    /**
     * Label of item that is currently active.
     * @deprecated since version 3.3.x
     */
    activeLabel?: string;
    /**
     * Flag to activate the Decorator variation.
     */
    decorated?: boolean;
    /**
     * Label of the button that appears on smaller resolutions to open the vertical navigation.
     */
    triggerLabel?: string;
    /**
     * List of items.
     */
    items: Array<IItemWithItems>;
    /**
     * Flag to indicate if `menubar-vertical-expand-lg` class is applied.
     */
    large?: boolean;
    /**
     * Custom component that will be displayed on mobile resolutions that toggles the visibility of the navigation.
     */
    trigger?: typeof Trigger;
    /**
     * Path to the spritemap that Icon should use when referencing symbols.
     */
    spritemap?: string;
}
export interface INavItemProps extends Omit<IItemWithItems, 'aria-current'> {
    'aria-current'?: 'page' | null;
    /**
     * Integer to keep track of what nested level the item is.
     */
    level: number;
    /**
     * Internal property
     * @ignore
     */
    parentItemRef?: React.RefObject<HTMLButtonElement | HTMLAnchorElement>;
    /**
     * Path to the spritemap that Icon should use when referencing symbols.
     */
    spritemap?: string;
}
declare function ClayVerticalNav(props: IProps): JSX.Element & {
    Trigger: typeof Trigger;
};
declare namespace ClayVerticalNav {
    var Trigger: ({ children, className, ...otherProps }: import("./Trigger").IProps) => JSX.Element;
}
export { ClayVerticalNav };
