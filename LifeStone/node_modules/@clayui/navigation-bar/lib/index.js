"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _button = _interopRequireDefault(require("@clayui/button"));

var _icon = _interopRequireDefault(require("@clayui/icon"));

var _layout = _interopRequireDefault(require("@clayui/layout"));

var _shared = require("@clayui/shared");

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireDefault(require("react"));

var _reactTransitionGroup = require("react-transition-group");

var _warning = _interopRequireDefault(require("warning"));

var _Item = _interopRequireDefault(require("./Item"));

var _context = require("./context");

var _excluded = ["children", "className", "inverted", "itemAriaCurrent", "spritemap", "triggerLabel"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ClayNavigationBar(_ref) {
  var children = _ref.children,
      className = _ref.className,
      _ref$inverted = _ref.inverted,
      inverted = _ref$inverted === void 0 ? false : _ref$inverted,
      _ref$itemAriaCurrent = _ref.itemAriaCurrent,
      ariaCurrent = _ref$itemAriaCurrent === void 0 ? true : _ref$itemAriaCurrent,
      spritemap = _ref.spritemap,
      triggerLabel = _ref.triggerLabel,
      otherProps = _objectWithoutProperties(_ref, _excluded);

  var _React$useState = _react.default.useState(false),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      expanded = _React$useState2[0],
      setExpanded = _React$useState2[1];

  var activeElementsCount = _react.default.Children.map(children, function (child) {
    return child.props.active;
  }).filter(Boolean).length;

  "production" !== "production" ? (0, _warning.default)(activeElementsCount <= 1, "ClayNavigationBar expects 0 or 1 active children, but received ".concat(activeElementsCount)) : void 0;
  return /*#__PURE__*/_react.default.createElement("nav", _extends({}, otherProps, {
    className: (0, _classnames.default)(className, 'navbar', 'navbar-collapse-absolute', 'navbar-expand-md', 'navbar-underline', 'navigation-bar', {
      'navigation-bar-light': !inverted,
      'navigation-bar-secondary': inverted
    })
  }), /*#__PURE__*/_react.default.createElement(_context.NavigationBarContext.Provider, {
    value: {
      ariaCurrent: ariaCurrent ? 'page' : null
    }
  }, /*#__PURE__*/_react.default.createElement(_layout.default.ContainerFluid, null, /*#__PURE__*/_react.default.createElement(_button.default, {
    "aria-expanded": expanded,
    className: (0, _classnames.default)('navbar-toggler', 'navbar-toggler-link', {
      collapsed: !expanded
    }),
    displayType: "unstyled",
    onClick: function onClick() {
      return setExpanded(!expanded);
    }
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: "navbar-text-truncate"
  }, triggerLabel), /*#__PURE__*/_react.default.createElement(_icon.default, {
    spritemap: spritemap,
    symbol: "caret-bottom"
  })), /*#__PURE__*/_react.default.createElement(_reactTransitionGroup.CSSTransition, {
    className: (0, _classnames.default)('navbar-collapse', {
      collapse: !expanded
    }),
    classNames: {
      enter: 'collapsing',
      enterActive: "show",
      enterDone: 'show',
      exit: "show",
      exitActive: 'collapsing'
    },
    in: expanded,
    onEnter: function onEnter(element) {
      return element.setAttribute('style', "height: 0px");
    },
    onEntering: function onEntering(element) {
      return (0, _shared.setElementFullHeight)(element);
    },
    onExit: function onExit(element) {
      return (0, _shared.setElementFullHeight)(element);
    },
    onExiting: function onExiting(element) {
      return element.setAttribute('style', "height: 0px");
    },
    timeout: 250
  }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_layout.default.ContainerFluid, null, /*#__PURE__*/_react.default.createElement("ul", {
    className: "navbar-nav"
  }, children)))))));
}

ClayNavigationBar.Item = _Item.default;
var _default = ClayNavigationBar;
exports.default = _default;