"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ALIGN_POSITIONS = void 0;

var _shared = require("@clayui/shared");

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireWildcard(require("react"));

var _excluded = ["alignPosition", "children", "className", "closeOnClickOutside", "containerProps", "defaultShow", "disableScroll", "displayType", "header", "onOffset", "onShowChange", "show", "size", "trigger"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var ALIGN_POSITIONS = ['top', 'top-left', 'top-right', 'bottom', 'bottom-left', 'bottom-right', 'left', 'left-top', 'left-bottom', 'right', 'right-top', 'right-bottom'];
exports.ALIGN_POSITIONS = ALIGN_POSITIONS;
var ALIGNMENTS_MAP = {
  bottom: ['tc', 'bc'],
  'bottom-left': ['tl', 'bl'],
  'bottom-right': ['tr', 'br'],
  left: ['cr', 'cl'],
  'left-bottom': ['br', 'bl'],
  'left-top': ['tr', 'tl'],
  right: ['cl', 'cr'],
  'right-bottom': ['bl', 'br'],
  'right-top': ['tl', 'tr'],
  top: ['bc', 'tc'],
  'top-left': ['bl', 'tl'],
  'top-right': ['br', 'tr']
};
var BOTTOM_OFFSET = [0, 4];
var LEFT_OFFSET = [-4, 0];
var RIGHT_OFFSET = [4, 0];
var TOP_OFFSET = [0, -4];
var OFFSET_MAP = {
  bctc: TOP_OFFSET,
  blbr: RIGHT_OFFSET,
  bltl: TOP_OFFSET,
  brbl: LEFT_OFFSET,
  brtr: TOP_OFFSET,
  clcr: RIGHT_OFFSET,
  crcl: LEFT_OFFSET,
  tcbc: BOTTOM_OFFSET,
  tlbl: BOTTOM_OFFSET,
  tltr: RIGHT_OFFSET,
  trbr: BOTTOM_OFFSET,
  trtl: LEFT_OFFSET
};

var ClayPopover = /*#__PURE__*/_react.default.forwardRef(function (_ref, ref) {
  var _classNames;

  var _ref$alignPosition = _ref.alignPosition,
      alignPosition = _ref$alignPosition === void 0 ? 'bottom' : _ref$alignPosition,
      children = _ref.children,
      className = _ref.className,
      _ref$closeOnClickOuts = _ref.closeOnClickOutside,
      closeOnClickOutside = _ref$closeOnClickOuts === void 0 ? false : _ref$closeOnClickOuts,
      _ref$containerProps = _ref.containerProps,
      containerProps = _ref$containerProps === void 0 ? {} : _ref$containerProps,
      _ref$defaultShow = _ref.defaultShow,
      defaultShow = _ref$defaultShow === void 0 ? false : _ref$defaultShow,
      _ref$disableScroll = _ref.disableScroll,
      disableScroll = _ref$disableScroll === void 0 ? false : _ref$disableScroll,
      displayType = _ref.displayType,
      header = _ref.header,
      _ref$onOffset = _ref.onOffset,
      onOffset = _ref$onOffset === void 0 ? function (points) {
    return OFFSET_MAP[points.join('')];
  } : _ref$onOffset,
      onShowChange = _ref.onShowChange,
      show = _ref.show,
      size = _ref.size,
      trigger = _ref.trigger,
      otherProps = _objectWithoutProperties(_ref, _excluded);

  var _useInternalState = (0, _shared.useInternalState)({
    defaultName: 'defaultShow',
    defaultValue: defaultShow,
    handleName: 'onShowChange',
    name: 'show',
    onChange: onShowChange,
    value: show
  }),
      _useInternalState2 = _slicedToArray(_useInternalState, 2),
      internalShow = _useInternalState2[0],
      setShow = _useInternalState2[1];

  var triggerRef = (0, _react.useRef)(null);
  var popoverRef = (0, _react.useRef)(null);
  var popoverScrollerRef = (0, _react.useRef)(null);

  if (!ref) {
    ref = popoverRef;
  }

  var align = (0, _react.useCallback)(function () {
    if (ref.current && triggerRef.current) {
      var _points = ALIGNMENTS_MAP[alignPosition];
      (0, _shared.doAlign)({
        offset: onOffset(_points),
        points: _points,
        sourceElement: ref.current,
        targetElement: triggerRef.current
      });
    }
  }, [alignPosition, triggerRef, ref]);
  (0, _react.useEffect)(function () {
    if (trigger) {
      align();
    }
  }, [align, internalShow]);
  (0, _react.useEffect)(function () {
    if (trigger && triggerRef.current) {
      return (0, _shared.observeRect)(triggerRef.current, align);
    }
  }, [align]);
  (0, _react.useEffect)(function () {
    if (!disableScroll && popoverScrollerRef.current && internalShow) {
      popoverScrollerRef.current.focus();
    }
  }, [disableScroll, popoverScrollerRef, internalShow]);
  (0, _react.useEffect)(function () {
    if (closeOnClickOutside && trigger) {
      var handleClick = function handleClick(event) {
        var nodeRefs = [popoverRef, popoverScrollerRef, triggerRef];
        var nodes = (Array.isArray(nodeRefs) ? nodeRefs : [nodeRefs]).filter(function (ref) {
          return ref.current;
        }).map(function (ref) {
          return ref.current;
        });

        if (event.target instanceof Node && !nodes.find(function (element) {
          return element.contains(event.target);
        })) {
          setShow(false);
        }
      };

      window.addEventListener('mousedown', handleClick);
      return function () {
        window.removeEventListener('mousedown', handleClick);
      };
    }
  }, [closeOnClickOutside, trigger]);
  (0, _react.useEffect)(function () {
    var handleKeyDown = function handleKeyDown(event) {
      if (event.key === 'Escape') {
        setShow(false);
      }
    };

    window.addEventListener('keydown', handleKeyDown);
    return function () {
      window.removeEventListener('keydown', handleKeyDown);
    };
  }, []);

  var content = /*#__PURE__*/_react.default.createElement("div", _extends({
    className: (0, _classnames.default)(className, 'popover', "clay-popover-".concat(alignPosition), (_classNames = {}, _defineProperty(_classNames, "popover-".concat(displayType), displayType), _defineProperty(_classNames, 'popover-width-lg', size === 'lg'), _defineProperty(_classNames, "show", internalShow), _classNames)),
    ref: ref
  }, otherProps), /*#__PURE__*/_react.default.createElement("div", {
    className: "arrow"
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)({
      'inline-scroller': !disableScroll
    }),
    ref: popoverScrollerRef,
    tabIndex: !disableScroll ? -1 : undefined
  }, header && /*#__PURE__*/_react.default.createElement("div", {
    className: "popover-header"
  }, header), /*#__PURE__*/_react.default.createElement("div", {
    className: "popover-body"
  }, children)));

  if (trigger) {
    content = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.cloneElement(trigger, {
      onClick: function onClick(event) {
        if (trigger.props.onClick) {
          trigger.props.onClick(event);
        }

        setShow(!internalShow);
      },
      ref: function ref(node) {
        if (node) {
          triggerRef.current = node; // Call the original ref, if any.

          var _ref2 = trigger.ref;

          if (typeof _ref2 === 'function') {
            _ref2(node);
          } else if (_ref2) {
            _ref2.current = node;
          }
        }
      }
    }), internalShow && /*#__PURE__*/_react.default.createElement(_shared.ClayPortal, containerProps, content));
  }

  return content;
});

ClayPopover.displayName = 'ClayPopover';
var _default = ClayPopover;
exports.default = _default;