"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _shared = require("@clayui/shared");

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireDefault(require("react"));

var _excluded = ["className", "defaultValue", "disabled", "max", "min", "onChange", "onValueChange", "showTooltip", "step", "tooltipPosition", "value"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var calcProgressWidth = function calcProgressWidth(element, thumbWidth, value, min, max, step) {
  var currentStep = (value - min) / step;
  var totalSteps = (max - min) / step;
  var progressWidth = currentStep / totalSteps * 100;
  var rangeWidth = element.clientWidth;
  var ratio = (1 - progressWidth * 0.01) * (thumbWidth / 1.001) / rangeWidth * 100;
  var offsetWidth = progressWidth;

  if (progressWidth !== 50) {
    offsetWidth = progressWidth - thumbWidth / 2 / rangeWidth * 100 + ratio;
  }

  return offsetWidth;
};

var useIsomorphicLayoutEffect = typeof window === 'undefined' ? _react.default.useEffect : _react.default.useLayoutEffect;

var ClaySlider = function ClaySlider(_ref) {
  var className = _ref.className,
      defaultValue = _ref.defaultValue,
      disabled = _ref.disabled,
      _ref$max = _ref.max,
      max = _ref$max === void 0 ? 100 : _ref$max,
      _ref$min = _ref.min,
      min = _ref$min === void 0 ? 0 : _ref$min,
      onChange = _ref.onChange,
      onValueChange = _ref.onValueChange,
      _ref$showTooltip = _ref.showTooltip,
      showTooltip = _ref$showTooltip === void 0 ? true : _ref$showTooltip,
      _ref$step = _ref.step,
      step = _ref$step === void 0 ? 1 : _ref$step,
      _ref$tooltipPosition = _ref.tooltipPosition,
      tooltipPosition = _ref$tooltipPosition === void 0 ? 'top' : _ref$tooltipPosition,
      value = _ref.value,
      otherProps = _objectWithoutProperties(_ref, _excluded);

  var _useInternalState = (0, _shared.useInternalState)({
    defaultName: 'defaultValue',
    defaultValue: defaultValue,
    handleName: 'onChange',
    name: 'value',
    onChange: onChange !== null && onChange !== void 0 ? onChange : onValueChange,
    value: value
  }),
      _useInternalState2 = _slicedToArray(_useInternalState, 2),
      internalValue = _useInternalState2[0],
      setValue = _useInternalState2[1];

  var _React$useState = _react.default.useState(0),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      offsetWidth = _React$useState2[0],
      setOffsetWidth = _React$useState2[1];

  var sliderRef = _react.default.useRef(null);

  var thumbRef = _react.default.useRef(null);

  useIsomorphicLayoutEffect(function () {
    if (sliderRef.current && thumbRef.current) {
      var thumbWidth = thumbRef.current.clientWidth;
      setOffsetWidth(calcProgressWidth(sliderRef.current, thumbWidth, internalValue, min, max, step));
    }
  }, [internalValue]);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('clay-range', className, {
      disabled: disabled
    })
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "clay-range-input"
  }, /*#__PURE__*/_react.default.createElement("input", _extends({}, otherProps, {
    className: "form-control-range",
    disabled: disabled,
    max: max,
    min: min,
    onChange: function onChange(event) {
      return setValue(Number(event.target.value));
    },
    ref: sliderRef,
    step: step,
    type: "range",
    value: internalValue
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "clay-range-track"
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "clay-range-progress",
    style: {
      width: "".concat(offsetWidth, "%")
    }
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "clay-range-thumb",
    ref: thumbRef
  }, showTooltip && /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)('tooltip', "clay-tooltip-".concat(tooltipPosition)),
    role: "tooltip"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "tooltip-arrow"
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "tooltip-inner"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "clay-range-value"
  }, internalValue)))))));
};

var _default = ClaySlider;
exports.default = _default;