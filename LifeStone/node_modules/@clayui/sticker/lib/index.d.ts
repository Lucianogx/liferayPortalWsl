/**
 * SPDX-FileCopyrightText: Â© 2019 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: BSD-3-Clause
 */
import React from 'react';
export declare type DisplayType = 'danger' | 'dark' | 'info' | 'light' | 'primary' | 'secondary' | 'success' | 'unstyled' | 'warning';
declare type Shape = 'circle' | 'user-icon';
declare type Position = 'bottom-left' | 'bottom-right' | 'top-left' | 'top-right';
declare type Size = 'lg' | 'sm' | 'xl';
export interface IClayStickerProps extends React.HTMLAttributes<HTMLSpanElement> {
    /**
     * Determines the color of the sticker.
     */
    displayType?: DisplayType;
    /**
     * Turns the sticker inline
     */
    inline?: boolean;
    /**
     * Flag to indicate if the sticker should be positioned on the outside
     * corners when position is defined.
     */
    outside?: boolean;
    /**
     * Position of the sticker in relation to the contents.
     */
    position?: Position;
    /**
     * Shape of the sticker.
     */
    shape?: Shape;
    /**
     * Sticker size.
     */
    size?: Size;
}
declare const Overlay: ({ children, className, inline, ...otherProps }: React.HTMLAttributes<HTMLSpanElement> & {
    /**
     * Flag to indicate if `inline-item` class should be applied
     */
    inline?: boolean | undefined;
}) => JSX.Element;
declare const Image: ({ className, ...otherProps }: React.ImgHTMLAttributes<HTMLImageElement>) => JSX.Element;
declare function ClaySticker(props: IClayStickerProps): JSX.Element & {
    Image: typeof Image;
    Overlay: typeof Overlay;
};
declare namespace ClaySticker {
    var Image: ({ className, ...otherProps }: React.ImgHTMLAttributes<HTMLImageElement>) => JSX.Element;
    var Overlay: ({ children, className, inline, ...otherProps }: React.HTMLAttributes<HTMLSpanElement> & {
        /**
         * Flag to indicate if `inline-item` class should be applied
         */
        inline?: boolean | undefined;
    }) => JSX.Element;
}
export default ClaySticker;
