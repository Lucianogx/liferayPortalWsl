"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _shared = require("@clayui/shared");

var _react = _interopRequireDefault(require("react"));

var _Content = _interopRequireDefault(require("./Content"));

var _Item = _interopRequireDefault(require("./Item"));

var _List = require("./List");

var _TabPane = _interopRequireDefault(require("./TabPane"));

var _excluded = ["activation", "active", "children", "className", "defaultActive", "displayType", "fade", "justified", "modern", "onActiveChange"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ClayTabs(_ref) {
  var _left$type;

  var _ref$activation = _ref.activation,
      activation = _ref$activation === void 0 ? 'manual' : _ref$activation,
      externalActive = _ref.active,
      children = _ref.children,
      className = _ref.className,
      _ref$defaultActive = _ref.defaultActive,
      defaultActive = _ref$defaultActive === void 0 ? 0 : _ref$defaultActive,
      displayType = _ref.displayType,
      _ref$fade = _ref.fade,
      fade = _ref$fade === void 0 ? false : _ref$fade,
      justified = _ref.justified,
      _ref$modern = _ref.modern,
      modern = _ref$modern === void 0 ? true : _ref$modern,
      onActiveChange = _ref.onActiveChange,
      otherProps = _objectWithoutProperties(_ref, _excluded);

  var _useInternalState = (0, _shared.useInternalState)({
    defaultName: 'defaultActive',
    defaultValue: defaultActive,
    handleName: 'onActiveChange',
    name: 'active',
    onChange: onActiveChange,
    value: externalActive
  }),
      _useInternalState2 = _slicedToArray(_useInternalState, 3),
      active = _useInternalState2[0],
      setActive = _useInternalState2[1],
      isUncontrolled = _useInternalState2[2];

  var _React$Children$toArr = _react.default.Children.toArray(children),
      _React$Children$toArr2 = _slicedToArray(_React$Children$toArr, 2),
      left = _React$Children$toArr2[0],
      right = _React$Children$toArr2[1];

  var tabsId = (0, _shared.useId)(); // @ts-ignore

  if ((left === null || left === void 0 ? void 0 : (_left$type = left.type) === null || _left$type === void 0 ? void 0 : _left$type.displayName) === 'ClayTabsList') {
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.cloneElement(left, {
      activation: activation,
      active: active,
      displayType: displayType,
      justified: justified,
      modern: modern,
      onActiveChange: setActive,
      shouldUseActive: isUncontrolled,
      tabsId: tabsId
    }), /*#__PURE__*/_react.default.isValidElement(right) && /*#__PURE__*/_react.default.cloneElement(right, {
      active: active,
      fade: fade,
      tabsId: tabsId
    }));
  }

  return /*#__PURE__*/_react.default.createElement(_List.List, _extends({}, otherProps, {
    activation: activation,
    active: active,
    className: className,
    displayType: displayType,
    justified: justified,
    modern: modern,
    onActiveChange: setActive
  }), children);
}
/**
 * @deprecated since v3.78.2 - Use new composition with Tabs.List and Tabs.Panels.
 */


ClayTabs.Content = _Content.default;
ClayTabs.Panels = _Content.default;
ClayTabs.Item = _Item.default;
ClayTabs.List = _List.List;
ClayTabs.TabPane = _TabPane.default;
ClayTabs.TabPanel = _TabPane.default;
var _default = ClayTabs;
exports.default = _default;