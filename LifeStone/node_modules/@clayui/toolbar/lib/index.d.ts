/**
 * SPDX-FileCopyrightText: Â© 2020 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: BSD-3-Clause
 */
import React from 'react';
import Action from './Action';
import Input from './Input';
import Item from './Item';
import Label from './Label';
import Link from './Link';
import Nav from './Nav';
import Section from './Section';
interface IProps extends React.HTMLAttributes<HTMLElement> {
    /**
     * Adds a helper class that turns the Toolbar inline at a specified breakpoint.
     */
    inlineBreakpoint?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';
    /**
     * Determines if the tbar-light class should be added to the Toolbar, making it's background white.
     */
    light?: boolean;
    /**
     * Defines if the toolbar should have the `subnav-tbar` class.
     */
    subnav?: boolean | {
        disabled?: boolean;
        displayType?: 'light' | 'primary';
    };
}
declare function ClayToolbar(props: IProps): JSX.Element & {
    Action: typeof Action;
    Item: typeof Item;
    Input: typeof Input;
    Label: typeof Label;
    Link: typeof Link;
    Nav: typeof Nav;
    Section: typeof Section;
};
declare namespace ClayToolbar {
    var Action: {
        ({ className, disabled, spritemap, symbol, ...otherProps }: import("./Action").IProps): JSX.Element;
        displayName: string;
    };
    var Item: {
        ({ children, className, expand, ...otherProps }: import("./Item").IProps): JSX.Element;
        displayName: string;
    };
    var Input: {
        ({ className, ...otherProps }: import("./Input").IProps): JSX.Element;
        displayName: string;
    };
    var Label: {
        ({ children, className, ...otherProps }: import("./Label").IProps): JSX.Element;
        displayName: string;
    };
    var Link: {
        ({ children, className, disabled, ...otherProps }: import("./Link").IProps): JSX.Element;
        displayName: string;
    };
    var Nav: {
        ({ children, className, wrap, ...otherProps }: import("./Nav").IProps): JSX.Element;
        displayName: string;
    };
    var Section: {
        ({ children, className, ...otherProps }: React.HTMLAttributes<HTMLDivElement>): JSX.Element;
        displayName: string;
    };
}
export default ClayToolbar;
