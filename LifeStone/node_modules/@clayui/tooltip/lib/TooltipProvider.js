"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _shared = require("@clayui/shared");

var _react = _interopRequireWildcard(require("react"));

var _warning = _interopRequireDefault(require("warning"));

var _Tooltip = _interopRequireDefault(require("./Tooltip"));

var _useAlign = require("./useAlign");

var _useClosestTitle2 = require("./useClosestTitle");

var _useTooltipState2 = require("./useTooltipState");

var _excluded = ["type"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var initialState = {
  align: 'top',
  floating: false,
  setAsHTML: false,
  title: ''
};
var TRIGGER_HIDE_EVENTS = ['dragstart', 'mouseout', 'mouseup', 'pointerup', 'touchend'];
var TRIGGER_SHOW_EVENTS = ['mouseover', 'mouseup', 'pointerdown', 'touchstart'];

var reducer = function reducer(state, _ref) {
  var type = _ref.type,
      payload = _objectWithoutProperties(_ref, _excluded);

  switch (type) {
    case 'update':
      return _objectSpread(_objectSpread({}, state), payload);

    case 'reset':
      return _objectSpread(_objectSpread({}, state), {}, {
        align: initialState.align,
        floating: false
      });

    default:
      throw new TypeError();
  }
};

var TooltipProvider = function TooltipProvider(_ref2) {
  var _ref2$autoAlign = _ref2.autoAlign,
      autoAlign = _ref2$autoAlign === void 0 ? true : _ref2$autoAlign,
      children = _ref2.children,
      _ref2$containerProps = _ref2.containerProps,
      containerProps = _ref2$containerProps === void 0 ? {} : _ref2$containerProps,
      _ref2$contentRenderer = _ref2.contentRenderer,
      contentRenderer = _ref2$contentRenderer === void 0 ? function (props) {
    return props.title;
  } : _ref2$contentRenderer,
      _ref2$delay = _ref2.delay,
      delay = _ref2$delay === void 0 ? 600 : _ref2$delay,
      scope = _ref2.scope;

  var _useReducer = (0, _react.useReducer)(reducer, initialState),
      _useReducer2 = _slicedToArray(_useReducer, 2),
      _useReducer2$ = _useReducer2[0],
      align = _useReducer2$.align,
      floating = _useReducer2$.floating,
      setAsHTML = _useReducer2$.setAsHTML,
      _useReducer2$$title = _useReducer2$.title,
      title = _useReducer2$$title === void 0 ? '' : _useReducer2$$title,
      dispatch = _useReducer2[1];

  var tooltipRef = (0, _react.useRef)(null);

  var _useInteractionFocus = (0, _shared.useInteractionFocus)(),
      getInteraction = _useInteractionFocus.getInteraction,
      isFocusVisible = _useInteractionFocus.isFocusVisible;

  var isHovered = (0, _react.useRef)(false);
  var isFocused = (0, _react.useRef)(false);

  var _useTooltipState = (0, _useTooltipState2.useTooltipState)({
    delay: delay
  }),
      close = _useTooltipState.close,
      isOpen = _useTooltipState.isOpen,
      open = _useTooltipState.open;

  var _useClosestTitle = (0, _useClosestTitle2.useClosestTitle)({
    onClick: (0, _react.useCallback)(function () {
      isFocused.current = false;
      isHovered.current = false;
    }, []),
    onHide: (0, _react.useCallback)(function () {
      if (!isHovered.current && !isFocused.current) {
        dispatch({
          type: 'reset'
        });
        close();
      }
    }, []),
    tooltipRef: tooltipRef
  }),
      getProps = _useClosestTitle.getProps,
      onHide = _useClosestTitle.onHide,
      target = _useClosestTitle.target,
      titleNode = _useClosestTitle.titleNode;

  (0, _useAlign.useAlign)({
    align: align,
    autoAlign: autoAlign,
    floating: floating,
    isOpen: isOpen,
    onAlign: (0, _react.useCallback)(function (align) {
      return dispatch({
        align: align,
        type: 'update'
      });
    }, []),
    sourceElement: tooltipRef,
    targetElement: titleNode,
    title: title
  });
  var onShow = (0, _react.useCallback)(function (event) {
    if (isHovered.current || isFocused.current) {
      var _props = getProps(event, isHovered.current);

      if (_props) {
        var _ref3;

        dispatch({
          align: (_ref3 = _props.align) !== null && _ref3 !== void 0 ? _ref3 : align,
          floating: _props.floating,
          setAsHTML: _props.setAsHTML,
          title: _props.title,
          type: 'update'
        });
        open(isFocused.current, _props.delay ? Number(_props.delay) : undefined);
      }
    }
  }, [align]);
  (0, _react.useEffect)(function () {
    var handleEsc = function handleEsc(event) {
      if (isOpen && event.key === _shared.Keys.Esc) {
        event.stopImmediatePropagation();
        onHide();
      }
    };

    document.addEventListener('keyup', handleEsc, true);
    return function () {
      return document.removeEventListener('keyup', handleEsc, true);
    };
  }, [isOpen]);

  var onHoverStart = function onHoverStart(event) {
    if (getInteraction() === 'pointer') {
      isHovered.current = true;
    } else {
      isHovered.current = false;
    }

    onShow(event);
  };

  var onHoverEnd = function onHoverEnd(event) {
    isFocused.current = false;
    isHovered.current = false;
    onHide(event);
  };

  var onFocus = function onFocus(event) {
    if (isFocusVisible()) {
      isFocused.current = true;
      onShow(event);
    }
  };

  var onBlur = function onBlur(event) {
    isFocused.current = false;
    isHovered.current = false;
    onHide(event);
  };

  (0, _react.useEffect)(function () {
    if (scope) {
      var disposeShowEvents = TRIGGER_SHOW_EVENTS.map(function (eventName) {
        return (0, _shared.delegate)(document.body, eventName, scope, onHoverStart);
      });
      var disposeHideEvents = TRIGGER_HIDE_EVENTS.map(function (eventName) {
        return (0, _shared.delegate)(document.body, eventName, "".concat(scope, ", .tooltip"), onHoverEnd);
      });
      var disposeShowFocus = (0, _shared.delegate)(document.body, 'focus', "".concat(scope, ", .tooltip"), onFocus, true);
      var disposeCloseBlur = (0, _shared.delegate)(document.body, 'blur', "".concat(scope, ", .tooltip"), onBlur, true);
      return function () {
        disposeShowEvents.forEach(function (_ref4) {
          var dispose = _ref4.dispose;
          return dispose();
        });
        disposeHideEvents.forEach(function (_ref5) {
          var dispose = _ref5.dispose;
          return dispose();
        });
        disposeShowFocus.dispose();
        disposeCloseBlur.dispose();
      };
    }
  }, [onShow]);
  "production" !== "production" ? (0, _warning.default)(typeof children === 'undefined' && typeof scope !== 'undefined' || typeof scope === 'undefined' && typeof children !== 'undefined', '<TooltipProvider />: You must use at least one of the following props: `children` or `scope`.') : void 0;
  "production" !== "production" ? (0, _warning.default)(typeof children !== 'undefined' || typeof scope !== 'undefined', '<TooltipProvider />: If you want to use `scope`, use <TooltipProvider /> as a singleton and do not pass `children`.') : void 0;
  "production" !== "production" ? (0, _warning.default)((children === null || children === void 0 ? void 0 : children.type) !== _react.default.Fragment, '<TooltipProvider />: React Fragment is not allowed as a child to TooltipProvider. Child must be a single HTML element that accepts `onMouseOver` and `onMouseOut`.') : void 0;
  var titleContent = contentRenderer({
    targetNode: target.current,
    title: title
  });

  var tooltip = isOpen && /*#__PURE__*/_react.default.createElement(_shared.ClayPortal, containerProps, /*#__PURE__*/_react.default.createElement(_Tooltip.default, {
    alignPosition: align,
    ref: tooltipRef,
    show: true
  }, setAsHTML && typeof titleContent === 'string' ? /*#__PURE__*/_react.default.createElement("span", {
    dangerouslySetInnerHTML: {
      __html: titleContent
    }
  }) : titleContent));

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, scope ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, tooltip, children) : children && /*#__PURE__*/_react.default.cloneElement(children, _objectSpread(_objectSpread({}, children.props), {}, {
    children: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, children.props.children, tooltip),
    onBlur: onBlur,
    onFocus: onFocus,
    onMouseOut: onHoverEnd,
    onMouseOver: onHoverStart
  })));
};

var _default = TooltipProvider;
exports.default = _default;