"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAlign = useAlign;

var _shared = require("@clayui/shared");

var _domAlign = require("dom-align");

var _react = require("react");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ALIGNMENTS = ['top', 'top-right', 'right', 'bottom-right', 'bottom', 'bottom-left', 'left', 'top-left'];
var ALIGNMENTS_MAP = {
  bottom: ['tc', 'bc'],
  'bottom-left': ['tl', 'bl'],
  'bottom-right': ['tr', 'br'],
  left: ['cr', 'cl'],
  right: ['cl', 'cr'],
  top: ['bc', 'tc'],
  'top-left': ['bl', 'tl'],
  'top-right': ['br', 'tr']
};
var ALIGNMENTS_INVERSE_MAP = {
  bctc: 'top',
  bltl: 'top-left',
  brtr: 'top-right',
  clcr: 'right',
  crcl: 'left',
  tcbc: 'bottom',
  tlbl: 'bottom-left',
  trbr: 'bottom-right'
};
var BOTTOM_OFFSET = [0, 7];
var LEFT_OFFSET = [-7, 0];
var RIGHT_OFFSET = [7, 0];
var TOP_OFFSET = [0, -7];
var OFFSET_MAP = {
  bctc: TOP_OFFSET,
  bltl: TOP_OFFSET,
  brtr: TOP_OFFSET,
  clcr: RIGHT_OFFSET,
  crcl: LEFT_OFFSET,
  tcbc: BOTTOM_OFFSET,
  tlbl: BOTTOM_OFFSET,
  trbr: BOTTOM_OFFSET
};

var ALIGNMENTS_FORCE_MAP = _objectSpread(_objectSpread({}, ALIGNMENTS_INVERSE_MAP), {}, {
  bctc: 'top-left',
  tcbc: 'bottom-left'
});

function useAlign(_ref) {
  var align = _ref.align,
      autoAlign = _ref.autoAlign,
      floating = _ref.floating,
      isOpen = _ref.isOpen,
      onAlign = _ref.onAlign,
      sourceElement = _ref.sourceElement,
      targetElement = _ref.targetElement,
      title = _ref.title;
  var mousePosition = (0, _shared.useMousePosition)(20);
  (0, _react.useEffect)(function () {
    if (sourceElement.current && isOpen && floating) {
      var points = ALIGNMENTS_MAP[align || 'top'];

      var _mousePosition = _slicedToArray(mousePosition, 2),
          clientX = _mousePosition[0],
          clientY = _mousePosition[1];

      (0, _domAlign.alignPoint)(sourceElement.current, {
        clientX: clientX,
        clientY: clientY
      }, {
        offset: OFFSET_MAP[points.join('')],
        points: points
      });
    }
  }, [isOpen, floating]);
  (0, _react.useEffect)(function () {
    if (targetElement.current && sourceElement.current && isOpen && !floating) {
      var points = ALIGNMENTS_MAP[align || 'top'];
      var alignment = (0, _shared.doAlign)({
        overflow: {
          adjustX: autoAlign,
          adjustY: autoAlign
        },
        points: points,
        sourceElement: sourceElement.current,
        targetElement: targetElement.current
      });
      var alignmentString = alignment.points.join('');
      var pointsString = points.join('');

      if (alignment.overflow.adjustX) {
        onAlign(ALIGNMENTS_FORCE_MAP[alignmentString]);
      } else if (pointsString !== alignmentString) {
        onAlign(ALIGNMENTS_INVERSE_MAP[alignmentString]);
      }
    }
  }, [align, title, isOpen]);
}