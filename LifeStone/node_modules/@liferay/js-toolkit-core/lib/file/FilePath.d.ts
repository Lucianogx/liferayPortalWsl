/**
 * SPDX-FileCopyrightText: Â© 2020 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: LGPL-3.0-or-later
 */
/** Alias type to be able to handle both native and FilePath arguments */
declare type AnyPath = string | FilePath;
export default class FilePath {
    static readonly nativeIsPosix: boolean;
    static coerce(anyPath: AnyPath): FilePath;
    static get sep(): string;
    constructor(nativePath: string, { posix }?: {
        posix?: boolean;
    });
    toString(): string;
    get asNative(): string;
    get asPosix(): string;
    get asWindows(): string;
    basename(): FilePath;
    dirname(): FilePath;
    is(anyPath: AnyPath): boolean;
    isAbsolute(): boolean;
    isRelative(): boolean;
    join(...anyPathFragments: AnyPath[]): FilePath;
    normalize(): FilePath;
    relative(anyPath: AnyPath): FilePath;
    resolve(): FilePath;
    /**
     * Convert a relative path to a dot relative file path, i.e., convert '' to
     * '.', or 'path/to/folder' to './path/to/folder' and leave
     * '../path/to/folder' untouched.
     *
     * This method is primarily intended to convert file paths to local Node
     * module names which, when required, must begin by './' or '../' to make
     * Node treat them like locals.
     *
     * Other than that it is quite possible that it doesn't have a real use when
     * dealing with the filesystem alone.
     */
    toDotRelative(): FilePath;
    private readonly _nativePath;
    private readonly _posixPath;
    private readonly _windowsPath;
}
export {};
