/**
 * SPDX-FileCopyrightText: Â© 2020 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: LGPL-3.0-or-later
 */
export { default as FilePath } from './file/FilePath';
export { default as Manifest } from './file/handler/Manifest';
export * from './node/modules';
export * from './node/namespace';
export { default as PkgDesc } from './bundler/PkgDesc';
export { default as B3Project, Imports as B3Imports, } from './project/bundler3/Project';
export { ProjectType as B3ProjectType } from './project/bundler3/Probe';
export { LogLevel as B3LogLevel } from './project/bundler3/Misc';
export { default as B3VersionInfo } from './project/bundler3/VersionInfo';
export { default as Project } from './project/liferayCli/Project';
export { Bundler2BuildOptions, CustomElementBuildOptions, MinifiableBuildOptions, WebpackBuildOptions, } from './project/liferayCli/Build';
export * as format from './format';
export { default as TemplateRenderer } from './template/Renderer';
export { negate as negateGlobs, prefix as prefixGlobs } from './globs';
export { default as escapeStringRegExp } from './escapeStringRegExp';
export { runNodeModulesBin, runPkgJsonScript } from './run';
export type { default as ClientExtensionConfigJson, ClientExtensionConfigJsonType, } from './schema/ClientExtensionConfigJson';
export type { default as ConfigurationJson, ConfigurationJsonPortletInstance, ConfigurationJsonSystem, ConfigurationJsonField, } from './schema/ConfigurationJson';
export type { default as LiferayJson, AnyTypedBuildConfig, Bundler2BuildConfig, CustomElementBuildConfig, TypedBuildConfig, } from './schema/LiferayJson';
export type { default as ManifestJson, ManifestJsonPackages, ManifestJsonPackage, ManifestJsonPackageDescriptor, ManifestJsonModules, ManifestJsonModule, ManifestJsonModuleFlags, } from './schema/ManifestJson';
export type { default as PkgJson, PkgJsonDependencies, PkgJsonPortletProperties, PkgJsonScripts, } from './schema/PkgJson';
export type { default as RemoteAppManifestJson } from './schema/RemoteAppManifestJson';
export type { SourceCode as JsSource, SourceTransform as JsSourceTransform, } from './transform/js';
export { replace as replaceJsSource, transformSource as transformJsSource, transformSourceFile as transformJsSourceFile, } from './transform/js';
export { getProgramStatements as getAstProgramStatements } from './transform/js/ast';
export { parse as parseAsAstProgram, parseAsExpressionStatement as parseAsAstExpressionStatement, } from './transform/js/parse';
export type { JsonTransform } from './transform/json';
export { transformJson, transformJsonFile } from './transform/json';
export type { TextTransform } from './transform/text';
export { transformText, transformTextFile } from './transform/text';
import replaceInStringLiterals from './transform/js/operation/replaceInStringLiterals';
import wrapModule from './transform/js/operation/wrapModule';
import addConfigurationJsonField from './transform/json/operation/addConfigurationJsonField';
import addOrSetPkgJsonScripts from './transform/json/operation/addOrSetPkgJsonScripts';
import addPkgJsonDependencies from './transform/json/operation/addPkgJsonDependencies';
import addPkgJsonPortletProperties from './transform/json/operation/addPkgJsonPortletProperties';
import deletePkgJsonDependencies from './transform/json/operation/deletePkgJsonDependencies';
import deletePkgJsonScripts from './transform/json/operation/deletePkgJsonScripts';
import setLiferayJsonDeployPath from './transform/json/operation/setLiferayJsonDeployPath';
import setPkgJsonMain from './transform/json/operation/setPkgJsonMain';
import appendLines from './transform/text/operation/appendLines';
import removeLines from './transform/text/operation/removeLines';
export declare const TRANSFORM_OPERATIONS: {
    ConfigurationJson: {
        addField: typeof addConfigurationJsonField;
    };
    JsSource: {
        replaceInStringLiterals: typeof replaceInStringLiterals;
        wrapModule: typeof wrapModule;
    };
    LiferayJson: {
        setLiferayJsonDeployPath: typeof setLiferayJsonDeployPath;
    };
    PkgJson: {
        addDependencies: typeof addPkgJsonDependencies;
        addPortletProperties: typeof addPkgJsonPortletProperties;
        addScripts: typeof addOrSetPkgJsonScripts;
        deleteDependencies: typeof deletePkgJsonDependencies;
        deleteScripts: typeof deletePkgJsonScripts;
        setMain: typeof setPkgJsonMain;
        setScripts: typeof addOrSetPkgJsonScripts;
    };
    Text: {
        appendLines: typeof appendLines;
        removeLines: typeof removeLines;
    };
};
