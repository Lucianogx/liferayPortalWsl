"use strict";
/**
 * SPDX-FileCopyrightText: Â© 2020 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: LGPL-3.0-or-later
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TRANSFORM_OPERATIONS = exports.transformTextFile = exports.transformText = exports.transformJsonFile = exports.transformJson = exports.parseAsAstExpressionStatement = exports.parseAsAstProgram = exports.getAstProgramStatements = exports.transformJsSourceFile = exports.transformJsSource = exports.replaceJsSource = exports.runPkgJsonScript = exports.runNodeModulesBin = exports.escapeStringRegExp = exports.prefixGlobs = exports.negateGlobs = exports.TemplateRenderer = exports.format = exports.Project = exports.B3LogLevel = exports.B3ProjectType = exports.B3Project = exports.PkgDesc = exports.Manifest = exports.FilePath = void 0;
// Operations on files
var FilePath_1 = require("./file/FilePath");
Object.defineProperty(exports, "FilePath", { enumerable: true, get: function () { return __importDefault(FilePath_1).default; } });
var Manifest_1 = require("./file/handler/Manifest");
Object.defineProperty(exports, "Manifest", { enumerable: true, get: function () { return __importDefault(Manifest_1).default; } });
// Utilities to deal with node packages and modules
__exportStar(require("./node/modules"), exports);
__exportStar(require("./node/namespace"), exports);
// TODO: remove the next section before babel 3 release
// Bundler plugin utilities
var PkgDesc_1 = require("./bundler/PkgDesc");
Object.defineProperty(exports, "PkgDesc", { enumerable: true, get: function () { return __importDefault(PkgDesc_1).default; } });
// Bundler 3 Project descriptor class and types
var Project_1 = require("./project/bundler3/Project");
Object.defineProperty(exports, "B3Project", { enumerable: true, get: function () { return __importDefault(Project_1).default; } });
var Probe_1 = require("./project/bundler3/Probe");
Object.defineProperty(exports, "B3ProjectType", { enumerable: true, get: function () { return Probe_1.ProjectType; } });
var Misc_1 = require("./project/bundler3/Misc");
Object.defineProperty(exports, "B3LogLevel", { enumerable: true, get: function () { return Misc_1.LogLevel; } });
// Liferay CLI Project descriptor class and types
var Project_2 = require("./project/liferayCli/Project");
Object.defineProperty(exports, "Project", { enumerable: true, get: function () { return __importDefault(Project_2).default; } });
// Format library
exports.format = __importStar(require("./format"));
// Template rendering
var Renderer_1 = require("./template/Renderer");
Object.defineProperty(exports, "TemplateRenderer", { enumerable: true, get: function () { return __importDefault(Renderer_1).default; } });
// Miscellaneous utilities
var globs_1 = require("./globs");
Object.defineProperty(exports, "negateGlobs", { enumerable: true, get: function () { return globs_1.negate; } });
Object.defineProperty(exports, "prefixGlobs", { enumerable: true, get: function () { return globs_1.prefix; } });
var escapeStringRegExp_1 = require("./escapeStringRegExp");
Object.defineProperty(exports, "escapeStringRegExp", { enumerable: true, get: function () { return __importDefault(escapeStringRegExp_1).default; } });
var run_1 = require("./run");
Object.defineProperty(exports, "runNodeModulesBin", { enumerable: true, get: function () { return run_1.runNodeModulesBin; } });
Object.defineProperty(exports, "runPkgJsonScript", { enumerable: true, get: function () { return run_1.runPkgJsonScript; } });
var js_1 = require("./transform/js");
Object.defineProperty(exports, "replaceJsSource", { enumerable: true, get: function () { return js_1.replace; } });
Object.defineProperty(exports, "transformJsSource", { enumerable: true, get: function () { return js_1.transformSource; } });
Object.defineProperty(exports, "transformJsSourceFile", { enumerable: true, get: function () { return js_1.transformSourceFile; } });
var ast_1 = require("./transform/js/ast");
Object.defineProperty(exports, "getAstProgramStatements", { enumerable: true, get: function () { return ast_1.getProgramStatements; } });
var parse_1 = require("./transform/js/parse");
Object.defineProperty(exports, "parseAsAstProgram", { enumerable: true, get: function () { return parse_1.parse; } });
Object.defineProperty(exports, "parseAsAstExpressionStatement", { enumerable: true, get: function () { return parse_1.parseAsExpressionStatement; } });
var json_1 = require("./transform/json");
Object.defineProperty(exports, "transformJson", { enumerable: true, get: function () { return json_1.transformJson; } });
Object.defineProperty(exports, "transformJsonFile", { enumerable: true, get: function () { return json_1.transformJsonFile; } });
var text_1 = require("./transform/text");
Object.defineProperty(exports, "transformText", { enumerable: true, get: function () { return text_1.transformText; } });
Object.defineProperty(exports, "transformTextFile", { enumerable: true, get: function () { return text_1.transformTextFile; } });
// Transformation operations per file type
/* eslint-disable @liferay/imports-first, @liferay/group-imports */
const replaceInStringLiterals_1 = __importDefault(require("./transform/js/operation/replaceInStringLiterals"));
const wrapModule_1 = __importDefault(require("./transform/js/operation/wrapModule"));
const addConfigurationJsonField_1 = __importDefault(require("./transform/json/operation/addConfigurationJsonField"));
const addOrSetPkgJsonScripts_1 = __importDefault(require("./transform/json/operation/addOrSetPkgJsonScripts"));
const addPkgJsonDependencies_1 = __importDefault(require("./transform/json/operation/addPkgJsonDependencies"));
const addPkgJsonPortletProperties_1 = __importDefault(require("./transform/json/operation/addPkgJsonPortletProperties"));
const deletePkgJsonDependencies_1 = __importDefault(require("./transform/json/operation/deletePkgJsonDependencies"));
const deletePkgJsonScripts_1 = __importDefault(require("./transform/json/operation/deletePkgJsonScripts"));
const setLiferayJsonDeployPath_1 = __importDefault(require("./transform/json/operation/setLiferayJsonDeployPath"));
const setPkgJsonMain_1 = __importDefault(require("./transform/json/operation/setPkgJsonMain"));
const appendLines_1 = __importDefault(require("./transform/text/operation/appendLines"));
const removeLines_1 = __importDefault(require("./transform/text/operation/removeLines"));
/* eslint-enable @liferay/imports-first, @liferay/group-imports */
exports.TRANSFORM_OPERATIONS = {
    ConfigurationJson: {
        addField: addConfigurationJsonField_1.default,
    },
    JsSource: {
        replaceInStringLiterals: replaceInStringLiterals_1.default,
        wrapModule: wrapModule_1.default,
    },
    LiferayJson: {
        setLiferayJsonDeployPath: setLiferayJsonDeployPath_1.default,
    },
    PkgJson: {
        addDependencies: addPkgJsonDependencies_1.default,
        addPortletProperties: addPkgJsonPortletProperties_1.default,
        addScripts: addOrSetPkgJsonScripts_1.default,
        deleteDependencies: deletePkgJsonDependencies_1.default,
        deleteScripts: deletePkgJsonScripts_1.default,
        setMain: setPkgJsonMain_1.default,
        setScripts: addOrSetPkgJsonScripts_1.default,
    },
    Text: {
        appendLines: appendLines_1.default,
        removeLines: removeLines_1.default,
    },
};
