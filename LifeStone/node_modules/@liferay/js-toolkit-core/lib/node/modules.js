"use strict";
/**
 * SPDX-FileCopyrightText: Â© 2020 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: LGPL-3.0-or-later
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.splitModuleName = exports.joinModuleName = exports.isLocalModule = void 0;
/**
 * Test if a module name is local to current package.
 * @param modulePath the module path
 * @return true if module is local to current package
 */
function isLocalModule(modulePath) {
    // See https://nodejs.org/api/modules.html#modules_all_together
    return modulePath.startsWith('.') || modulePath.startsWith('/');
}
exports.isLocalModule = isLocalModule;
/**
 * Splits a module name into scope, package and module path parts.
 * @param scope
 * @param pkgName
 * @param modulePath
 * @retur a full module name
 */
function joinModuleName(scope, pkgName, modulePath) {
    if (!pkgName || pkgName === '') {
        throw new Error('Argument pkgName is mandatory');
    }
    let moduleName = '';
    if (scope && scope !== '') {
        if (!scope.startsWith('@')) {
            throw new Error('Argument scope must start with @');
        }
        moduleName += `${scope}/`;
    }
    moduleName += pkgName;
    if (modulePath && modulePath !== '') {
        if (!modulePath.startsWith('/')) {
            throw new Error('Argument modulePath must start with /');
        }
        moduleName += modulePath;
    }
    return moduleName;
}
exports.joinModuleName = joinModuleName;
/**
 * Splits a module name into scope, package and module path parts.
 * @param moduleName a full module name
 * @return {Object} a hash with scope (starts with at sign), pkgName and
 *         modulePath (starts with /)
 */
function splitModuleName(moduleName) {
    let ret;
    let parts = moduleName.split('/');
    if (moduleName.startsWith('@')) {
        if (parts.length < 2) {
            throw new Error(`No package name found in: ${moduleName}`);
        }
        ret = {
            pkgName: parts[1],
            scope: parts[0],
        };
        parts = parts.slice(2);
    }
    else {
        if (parts.length < 1) {
            throw new Error(`No package name found in: ${moduleName}`);
        }
        ret = {
            pkgName: parts[0],
        };
        parts = parts.slice(1);
    }
    const modulePath = parts.join('/');
    if (modulePath !== '') {
        ret.modulePath = `/${modulePath}`;
    }
    return ret;
}
exports.splitModuleName = splitModuleName;
