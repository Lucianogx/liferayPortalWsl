"use strict";
/**
 * SPDX-FileCopyrightText: Â© 2020 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: LGPL-3.0-or-later
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const dot_prop_1 = __importDefault(require("dot-prop"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const read_json_sync_1 = __importDefault(require("read-json-sync"));
const FilePath_1 = __importDefault(require("../../file/FilePath"));
const format_1 = require("../../format");
const getFeaturesFilePath_1 = require("./getFeaturesFilePath");
/**
 * Reflects JAR file configuration of JS Toolkit projects.
 */
class Jar {
    constructor(project) {
        this._project = project;
    }
    /**
     * Get configuration description file path.
     * @return path of the file or undefined if not configured
     */
    get configurationFile() {
        if (!this.supported) {
            return undefined;
        }
        const { _project } = this;
        const absPath = (0, getFeaturesFilePath_1.getFeaturesFilePath)(_project, 'create-jar.features.configuration', 'features/configuration.json');
        if (!absPath) {
            return undefined;
        }
        return new FilePath_1.default(absPath);
    }
    /**
     * Get user configured manifest headers
     */
    get customManifestHeaders() {
        if (!this.supported) {
            return undefined;
        }
        const { configuration } = this._project;
        if (this._customManifestHeaders === undefined) {
            const manifestFilePath = (0, getFeaturesFilePath_1.getFeaturesFilePath)(this._project, 'create-jar.features.manifest', 'features/manifest.json');
            const featuresHeaders = manifestFilePath
                ? (0, read_json_sync_1.default)(manifestFilePath)
                : {};
            const configurationHeaders = dot_prop_1.default.get(configuration, 'create-jar.customManifestHeaders', {});
            this._customManifestHeaders = Object.assign(configurationHeaders, featuresHeaders);
        }
        return this._customManifestHeaders;
    }
    /**
     * Get output directory for JAR file relative to `project.dir` and starting
     * with `./`
     */
    get outputDir() {
        if (!this.supported) {
            return undefined;
        }
        const { _project } = this;
        const { configuration } = _project;
        if (this._outputDir === undefined) {
            let outputDirPosixPath = dot_prop_1.default.get(configuration, 'create-jar.output-dir', _project.dir.relative(_project.outputDir).toDotRelative()
                .asPosix);
            if (outputDirPosixPath !== undefined) {
                if (!outputDirPosixPath.startsWith('./')) {
                    outputDirPosixPath = `./${outputDirPosixPath}`;
                }
                this._outputDir = _project.dir.join(new FilePath_1.default(outputDirPosixPath, {
                    posix: true,
                }));
            }
        }
        return this._outputDir;
    }
    /**
     * Get filename of output JAR file
     */
    get outputFilename() {
        if (!this.supported) {
            return undefined;
        }
        const { configuration, pkgJson } = this._project;
        if (this._outputFilename === undefined) {
            this._outputFilename = dot_prop_1.default.get(configuration, 'create-jar.output-filename', pkgJson.name + '-' + pkgJson.version + '.jar');
        }
        return this._outputFilename;
    }
    /**
     * Whether or not to add a manifest header in JAR file to make the JS
     * extender process this bundle.
     *
     * @return
     * can be a boolean, a string forcing an extender version number or 'any' to
     * leave version unbounded
     */
    get requireJsExtender() {
        if (!this.supported) {
            return undefined;
        }
        const { configuration, pkgJson } = this._project;
        return dot_prop_1.default.get(configuration, 'create-jar.features.js-extender', !!pkgJson.portlet);
    }
    get supported() {
        const { configuration } = this._project;
        return !!dot_prop_1.default.get(configuration, 'create-jar', true);
    }
    get webContextPath() {
        if (!this.supported) {
            return undefined;
        }
        if (!this._webContextPath) {
            const { pkgJson } = this._project;
            const bndWebContextPath = this._getBndWebContextPath();
            const configurationContextPath = this._getConfigurationContextPath();
            if (bndWebContextPath && configurationContextPath) {
                (0, format_1.print)((0, format_1.warn) `
Configured web context paths in liferay-npm-bundler.config.js and bnd.bnd are 
different: using the one in liferay-npm-bundler.config.js

`);
                this._webContextPath = configurationContextPath;
            }
            else if (bndWebContextPath) {
                this._webContextPath = bndWebContextPath;
            }
            else if (configurationContextPath) {
                this._webContextPath = configurationContextPath;
            }
            else {
                this._webContextPath = `/${pkgJson.name}-${pkgJson.version}`;
            }
        }
        return this._webContextPath;
    }
    _getBndWebContextPath() {
        const { dir } = this._project;
        const bndFile = dir.join('bnd.bnd');
        if (fs_extra_1.default.existsSync(bndFile.asNative)) {
            const bnd = fs_extra_1.default.readFileSync(bndFile.asNative).toString();
            const lines = bnd.split('\n');
            const webContextPathLine = lines.find((line) => line.startsWith('Web-ContextPath:'));
            if (webContextPathLine !== undefined) {
                return webContextPathLine.substring(16).trim();
            }
        }
        return undefined;
    }
    _getConfigurationContextPath() {
        const { configuration } = this._project;
        return dot_prop_1.default.get(configuration, 'create-jar.features.web-context', undefined);
    }
}
exports.default = Jar;
