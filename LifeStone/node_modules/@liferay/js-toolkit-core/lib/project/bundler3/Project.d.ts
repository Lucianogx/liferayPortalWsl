/**
 * SPDX-FileCopyrightText: Â© 2020 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: LGPL-3.0-or-later
 */
import webpack from 'webpack';
import FilePath from '../../file/FilePath';
import PkgJson from '../../schema/PkgJson';
import Adapt from './Adapt';
import Jar from './Jar';
import Localization from './Localization';
import Misc from './Misc';
import Probe from './Probe';
import VersionInfo from './VersionInfo';
/** Exports configuration */
export interface Exports {
    [id: string]: string;
}
/** Imports configuration */
export interface Imports {
    [pkgName: string]: ImportsConfig;
}
export interface ImportsConfig {
    provider: string;
    version: string;
}
/** A package manager */
export declare type PkgManager = 'npm' | 'yarn' | null;
/**
 * Describes a standard JS Toolkit project.
 */
export default class Project {
    static WARN_ON_NPMBUNDLERRC: boolean;
    adapt: Adapt;
    jar: Jar;
    l10n: Localization;
    misc: Misc;
    probe: Probe;
    /**
     * @param projectDirPath project's path in native format
     */
    constructor(projectDirPath: string);
    /**
     * Get absolute path to project's directory.
     */
    get dir(): FilePath;
    /** Get absolute path to output directory */
    get outputDir(): FilePath;
    /** Get absolute path to source directory */
    get sourceDir(): FilePath;
    /**
     * Get absolute path to directory where work files must be placed.
     *
     * @remarks
     * Work files are files that can be cached between different builds to speed
     * the process or simply because they can help in debugging a failed build.
     *
     * @return the work dir or undefined if not configured
     */
    get workDir(): FilePath | undefined;
    /**
     * Get module paths	to export to the outside world making them available
     * through the AMD loader.
     *
     * @remarks
     * Note that the usual CommonJS syntax is used to differentiate local
     * modules from dependency (node_modules) modules.
     *
     * For example:
     *
     * - Local module: './src/my-api'
     * - Dependency module: 'lodash/trimEnd'
     */
    get exports(): Exports;
    get imports(): Imports;
    /**
     * Get user's webpack configuration.
     */
    get webpackConfiguration(): webpack.Configuration;
    /**
     * Get directories inside the project containing source files starting with
     * `./` (so that they can be safely path.joined)
     */
    get sources(): FilePath[];
    /**
     * Get global plugins configuration.
     */
    get globalConfig(): object;
    /**
     * Get project's parsed liferay-npm-bundler.config.js file
     */
    get configuration(): object;
    /**
     * Get project's parsed package.json file
     */
    get pkgJson(): PkgJson;
    /**
     * Return the package manager that the project is using or null if it cannot
     * be inferred.
     */
    get pkgManager(): PkgManager;
    /**
     * Get all available information about versions of plugins and presets used
     * for the build.
     * @return a Map where keys are package names
     */
    get versionsInfo(): Map<string, VersionInfo>;
    /**
     * Reload the whole project from given directory. Especially useful for
     * tests.
     * @param projectPath
     * project's path in native format (whether absolute or relative to cwd)
     * @param configFilePath
     * optional path to configuration file (relative to `projectPath` if not
     * given as an absolute path)
     */
    loadFrom(projectPath: string, configFilePath?: string): void;
    /**
     * Requires a module in the context of the project (as opposed to the
     * context of the calling package which would just use a normal `require()`
     * call).
     * @param moduleName
     */
    require(moduleName: string): unknown;
    /**
     * Resolves a module in the context of the project (as opposed to the
     * context of the calling package which would just use a normal
     * `require.resolve()` call).
     * @param moduleName
     */
    resolve(moduleName: string): string;
    /**
     * Set program arguments so that some of them can be parsed as if they were
     * `liferay-npm-bundler.config.js` options.
     */
    set argv(argv: {
        'config': string;
        'create-jar': boolean;
        'dump-report': boolean;
    });
    _loadConfiguration(): void;
    _loadPkgJson(): void;
    /** Absolute path to config file */
    private _configFile;
    private _configuration;
    private _pkgJson;
    private _pkgManager;
    /** Absolute path to project directory */
    private _projectDir;
    private _outputDir;
    private _sourceDir;
    private _workDir;
    /** Project relative paths to source directories */
    private _sources;
    /** Modules to export to the outside world */
    private _exports;
    /** Modules to import from the outside world */
    private _imports;
    /** User's webpack configuration */
    private _webpackConfiguration;
    private _versionsInfo;
}
