"use strict";
/**
 * SPDX-FileCopyrightText: Â© 2021 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: LGPL-3.0-or-later
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const os_1 = __importDefault(require("os"));
const FilePath_1 = __importDefault(require("../../file/FilePath"));
function persist(project, domain, property, options = { location: 'user-project' }) {
    var _a;
    let { configProperty, location } = options;
    configProperty = configProperty !== null && configProperty !== void 0 ? configProperty : property;
    location = location !== null && location !== void 0 ? location : 'user-project';
    let file;
    switch (location) {
        case 'home':
            file = new FilePath_1.default(os_1.default.homedir()).join('.liferay.json');
            break;
        case 'project':
            file = project.dir.join('liferay.json');
            break;
        case 'user-project':
            file = project.dir.join('.liferay.json');
            break;
        default:
            throw new Error(`Invalid location: ${location}`);
    }
    let liferayJson = {};
    try {
        liferayJson = JSON.parse(fs_1.default.readFileSync(file.asNative, 'utf8'));
    }
    catch (error) {
        if (error.code !== 'ENOENT') {
            throw error;
        }
    }
    liferayJson[domain] = liferayJson[domain] || {};
    set(liferayJson, `${domain}.${configProperty}`, (_a = get(project, `${domain}.${property}`)) === null || _a === void 0 ? void 0 : _a.toString());
    fs_1.default.writeFileSync(file.asNative, JSON.stringify(liferayJson, null, '\t'), 'utf8');
}
exports.default = persist;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function get(object, property) {
    const parts = property.split('.');
    parts.forEach((part) => (object = object[part]));
    return object;
}
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function set(object, property, value) {
    const parts = property.split('.');
    for (let i = 0; i < parts.length - 1; i++) {
        const part = parts[i];
        if (object[part] === undefined) {
            object[part] = {};
        }
        object = object[part];
    }
    object[parts[parts.length - 1]] = value;
}
