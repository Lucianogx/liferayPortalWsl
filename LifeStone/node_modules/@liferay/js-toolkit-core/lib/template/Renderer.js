"use strict";
/**
 * SPDX-FileCopyrightText: Â© 2020 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: LGPL-3.0-or-later
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ejs_1 = __importDefault(require("ejs"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const FilePath_1 = __importDefault(require("../file/FilePath"));
/**
 * Template renderer class
 */
class Renderer {
    constructor(templatesDir, outputDir) {
        this._templatesDir = templatesDir;
        this._outputDir = outputDir;
    }
    /**
     * @param templateRelPosixPath the template path (relative to templates dir) in POSIX format
     * @param data the contextual data to render the template
     * @return the contents of the rendered template
     */
    render(templateRelPosixPath, data = {}) {
        const templateRelPath = new FilePath_1.default(templateRelPosixPath, {
            posix: true,
        });
        if (!templateRelPath.isRelative()) {
            throw new Error(`Template path must be relative: ${templateRelPath}`);
        }
        return new Promise((resolve, reject) => {
            ejs_1.default.renderFile(this._templatesDir.join(templateRelPath) + '.ejs', data, {
                escape: (text) => text,
            }, (error, str) => {
                if (error) {
                    return reject(error);
                }
                if (this._outputDir) {
                    const outputFile = this._outputDir.join(templateRelPath);
                    fs_extra_1.default.ensureDirSync(outputFile.dirname().asNative);
                    fs_extra_1.default.writeFileSync(outputFile.asNative, str);
                }
                resolve(str);
            });
        });
    }
}
exports.default = Renderer;
