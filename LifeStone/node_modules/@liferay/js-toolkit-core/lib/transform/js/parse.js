"use strict";
/**
 * SPDX-FileCopyrightText: Â© 2020 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: LGPL-3.0-or-later
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseAsExpressionStatement = exports.parse = void 0;
const acorn = __importStar(require("acorn"));
/**
 * Parses JavaScript source code and converts it to a Program AST node.
 *
 * @param code
 */
function parse(code) {
    const program = acorn.parse(code, {
        allowAwaitOutsideFunction: true,
        allowHashBang: true,
        allowImportExportEverywhere: true,
        allowReserved: true,
        allowReturnOutsideFunction: true,
        ecmaVersion: 10,
        locations: true,
        sourceType: 'module',
    });
    if (program.type !== 'Program') {
        throw new Error('Code cannot be parsed as an AST Program node');
    }
    return program;
}
exports.parse = parse;
/**
 * Parses a snippet of JavaScript source code, extracts it from the Program
 * AST node.
 *
 * This is useful to get AST representations of code snippets to be used during
 * AST transformations.
 *
 * @remarks
 * Note that the given source code must generate one single AST node below the
 * Program node.
 *
 * @param code
 */
function parseAsExpressionStatement(code) {
    const { body } = parse(code);
    if (body.length !== 1 || body[0].type !== 'ExpressionStatement') {
        throw new Error('Code cannot be parses as an ExpressionStatement node');
    }
    return body[0];
}
exports.parseAsExpressionStatement = parseAsExpressionStatement;
