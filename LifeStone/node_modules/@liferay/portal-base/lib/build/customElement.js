"use strict";
/**
 * SPDX-FileCopyrightText: Â© 2021 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: LGPL-3.0-or-later
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @liferay/no-dynamic-require */
const js_toolkit_core_1 = require("@liferay/js-toolkit-core");
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const abort_1 = __importDefault(require("../util/abort"));
const copyAssets_1 = __importDefault(require("../util/copyAssets"));
const findScssFiles_1 = __importDefault(require("../util/findScssFiles"));
const getWebpackConfiguration_1 = __importDefault(require("../util/getWebpackConfiguration"));
const makeZip_1 = __importDefault(require("../util/makeZip"));
const runWebpack_1 = __importDefault(require("../util/runWebpack"));
const { print, warn } = js_toolkit_core_1.format;
async function customElement(project) {
    const options = project.build.options;
    if (project.isWorkspace &&
        !fs_1.default.existsSync(path_1.default.join(project.build.dir.asNative, 'client-extension.yaml'))) {
        print(warn `
Your project does not have a 'client-extension.yaml', which is required when using within a Liferay workspace.
`);
    }
    checkConfiguration(project);
    (0, copyAssets_1.default)(project);
    await buildProject(project);
    if (!project.isWorkspace) {
        const typeSettings = {
            cssURLs: (0, findScssFiles_1.default)(project).map((file) => project.assetsDir
                .relative(file)
                .toDotRelative()
                .asPosix.replace(/\.scss$/i, '.css')),
            htmlElementName: options.htmlElementName,
            instanceable: true,
            portletCategoryName: options.portletCategoryName,
            urls: [
                project.srcDir.relative(project.mainModuleFile).toDotRelative()
                    .asPosix,
            ],
            useESM: true,
        };
        await (0, makeZip_1.default)(project, 'customElement', typeSettings);
    }
}
exports.default = customElement;
function checkConfiguration(project) {
    const options = project.build.options;
    if (project.pkgJson.type === 'module') {
        (0, abort_1.default)('Custom element projects cannot be of {type module} (see {package.json}).');
    }
    if (!options.htmlElementName) {
        (0, abort_1.default)(`
Custom element name is not configured and cannot be inferred from the source code.

Please configure it using {build.options.htmlElementName} in the {liferay.json} file.`);
    }
}
async function buildProject(project) {
    await (0, runWebpack_1.default)(project, (0, getWebpackConfiguration_1.default)(project));
}
