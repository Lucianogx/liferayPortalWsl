"use strict";
/**
 * SPDX-FileCopyrightText: Â© 2021 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: LGPL-3.0-or-later
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const js_toolkit_core_1 = require("@liferay/js-toolkit-core");
const promptForConfiguration_1 = __importDefault(require("./util/promptForConfiguration"));
const runConfigureWizard_1 = __importDefault(require("./util/runConfigureWizard"));
const { info, print } = js_toolkit_core_1.format;
async function configureBuild() {
    await (0, runConfigureWizard_1.default)('build', async () => {
        const project = new js_toolkit_core_1.Project('.');
        switch (project.build.type) {
            case 'bundler2':
                await configureBundler2Build();
                break;
            case 'customElement':
                await configureCustomElementBuild(project);
                break;
            default:
                throw new Error(`Unknown build type: ${project.build.type}`);
        }
    });
}
exports.default = configureBuild;
async function configureBundler2Build() {
    print(info `There's nothing that can be configured in Bundler 2 type projects.`);
}
async function configureCustomElementBuild(project) {
    const options = project.build.options;
    const { htmlElementName } = await (0, promptForConfiguration_1.default)([
        {
            default: options.htmlElementName,
            message: 'What is the custom element HTML tag name?',
            name: 'htmlElementName',
            type: 'input',
        },
    ]);
    if (htmlElementName !== undefined) {
        project.build.storeOption('htmlElementName', htmlElementName);
    }
}
