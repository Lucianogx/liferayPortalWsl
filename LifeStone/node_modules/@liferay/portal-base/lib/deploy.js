"use strict";
/**
 * SPDX-FileCopyrightText: Â© 2021 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: LGPL-3.0-or-later
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const js_toolkit_core_1 = require("@liferay/js-toolkit-core");
const fs_1 = __importDefault(require("fs"));
const configureDeploy_1 = __importDefault(require("./configureDeploy"));
const { fail, info, print, success, warn } = js_toolkit_core_1.format;
async function deploy() {
    const project = new js_toolkit_core_1.Project('.');
    if (!project.deploy.dir) {
        print('', warn `There's no deploy configuration for the project yet`, '', info `The Deploy configuration wizard will be run before doing anything.`);
        await (0, configureDeploy_1.default)();
        project.reload();
    }
    const deployDir = project.deploy.dir;
    if (!deployDir) {
        print(fail `No path to Liferay installation given: cannot deploy`);
        process.exit(1);
    }
    if (!fs_1.default.existsSync(project.dist.file.asNative)) {
        print(fail `Bundle {${project.dist.file}} does not exist; please build it before deploying`);
        process.exit(1);
    }
    fs_1.default.copyFileSync(project.dist.file.asNative, deployDir.join(project.dist.file.basename().asNative).asNative);
    print(success `Bundle {${project.dist.file.basename().asNative}} deployed to {${deployDir.asNative}}`);
}
exports.default = deploy;
