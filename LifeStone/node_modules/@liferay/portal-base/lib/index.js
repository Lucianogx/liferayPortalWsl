"use strict";
/**
 * SPDX-FileCopyrightText: Â© 2021 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: LGPL-3.0-or-later
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const js_toolkit_core_1 = require("@liferay/js-toolkit-core");
const path_1 = __importDefault(require("path"));
const build_1 = __importDefault(require("./build"));
const clean_1 = __importDefault(require("./clean"));
const configureBuild_1 = __importDefault(require("./configureBuild"));
const configureDeploy_1 = __importDefault(require("./configureDeploy"));
const configureStart_1 = __importDefault(require("./configureStart"));
const deploy_1 = __importDefault(require("./deploy"));
const prepareStart_1 = __importDefault(require("./prepareStart"));
const start_1 = __importDefault(require("./start"));
const { fail, print, title } = js_toolkit_core_1.format;
async function run(platformPath, taskOverrides) {
    if (process.argv.length < 3) {
        print(fail `No command provided`);
        process.exit(1);
    }
    const cmd = process.argv[2];
    /* eslint-disable-next-line */
    const pkgJson = require(path_1.default.join(platformPath, 'package.json'));
    const tasks = {
        build: build_1.default,
        clean: clean_1.default,
        configureBuild: configureBuild_1.default,
        configureDeploy: configureDeploy_1.default,
        configureStart: configureStart_1.default,
        deploy: deploy_1.default,
        prepareStart: prepareStart_1.default,
        start: start_1.default,
        ...(taskOverrides || {}),
    };
    const project = new js_toolkit_core_1.Project('.');
    switch (cmd) {
        case 'build':
            if (isSwitchEnabled('configure')) {
                await tasks.configureBuild();
            }
            else {
                print(title `Building project for target platform: {${pkgJson.name}}`);
                await tasks.build();
            }
            break;
        case 'clean':
            print(title `Cleaning output folders`);
            await tasks.clean();
            break;
        case 'deploy':
            if (project.isWorkspace) {
                print(fail `
Your project cannot be deployed from npm because it is inside a Liferay
workspace.

Please use Gradle's command {gw deploy} instead.

> Note, you must also have a 'client-extension.yaml' for 'gw deploy' to work properly.
`);
            }
            else {
                if (isSwitchEnabled('configure')) {
                    await tasks.configureDeploy();
                }
                else {
                    if (!isSwitchEnabled('only')) {
                        print(title `Building project for target platform: {${pkgJson.name}}`);
                        await tasks.build();
                    }
                    print(title `Deploying project to Liferay local installation`);
                    await tasks.deploy();
                }
            }
            break;
        case 'start':
            if (project.isWorkspace) {
                print(title `Starting project live development server`);
                await tasks.start();
            }
            else {
                if (isSwitchEnabled('configure')) {
                    await tasks.configureStart();
                }
                else {
                    if (!isSwitchEnabled('only')) {
                        print(title `Deploying live project to Liferay local installation`);
                        await tasks.prepareStart();
                    }
                    print(title `Starting project live development server`);
                    await tasks.start();
                }
            }
            break;
        default:
            print(fail `Unknown command: {${cmd}}`);
            process.exit(1);
    }
}
exports.default = run;
function isSwitchEnabled(name) {
    return !!process.argv.find((arg) => arg === `--${name}`);
}
