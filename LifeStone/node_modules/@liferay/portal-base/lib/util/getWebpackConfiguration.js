"use strict";
/**
 * SPDX-FileCopyrightText: Â© 2021 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: LGPL-3.0-or-later
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mini_css_extract_plugin_1 = __importDefault(require("mini-css-extract-plugin"));
const terser_webpack_plugin_1 = __importDefault(require("terser-webpack-plugin"));
const webpack_remove_empty_scripts_1 = __importDefault(require("webpack-remove-empty-scripts"));
const findScssFiles_1 = __importDefault(require("../util/findScssFiles"));
function getWebpackConfiguration(project) {
    const mainEntryName = project.srcDir
        .relative(project.mainModuleFile)
        .asNative.replace(/\.[^.]*$/i, '');
    const { externals, minify } = project.build.options;
    const minimizer = [];
    if (minify) {
        minimizer.push(new terser_webpack_plugin_1.default({
            extractComments: false,
        }));
    }
    const webpackConfig = {
        entry: {
            [mainEntryName]: {
                import: project.mainModuleFile.asNative,
            },
            ...getScssEntryPoints(project),
        },
        experiments: {
            outputModule: true,
        },
        externals,
        externalsType: 'module',
        module: {
            rules: [
                {
                    exclude: /node_modules/,
                    test: /\.js$/,
                    use: {
                        loader: require.resolve('babel-loader'),
                        options: {
                            presets: [
                                require.resolve('@babel/preset-env'),
                                require.resolve('@babel/preset-react'),
                            ],
                        },
                    },
                },
                {
                    exclude: /node_modules/,
                    test: /\.tsx?$/,
                    use: {
                        loader: require.resolve('ts-loader'),
                    },
                },
            ],
        },
        optimization: {
            minimizer,
        },
        output: {
            environment: {
                dynamicImport: true,
                module: true,
            },
            filename: '[name].js',
            library: {
                type: 'module',
            },
            path: project.build.dir.asNative,
        },
        plugins: [new mini_css_extract_plugin_1.default(), new webpack_remove_empty_scripts_1.default()],
        resolve: {
            extensions: ['.tsx', '.ts', '.js'],
        },
    };
    if (project.assetsDir) {
        webpackConfig.module.rules.push({
            include: project.assetsDir.asNative,
            test: /\.(sass|scss)$/,
            use: [
                mini_css_extract_plugin_1.default.loader,
                require.resolve('css-loader'),
                {
                    loader: require.resolve('sass-loader'),
                    options: {
                        sassOptions: {
                            outputStyle: minify ? 'compressed' : 'expanded',
                        },
                    },
                },
            ],
        });
    }
    return webpackConfig;
}
exports.default = getWebpackConfiguration;
function getScssEntryPoints(project) {
    const entryPoints = {};
    (0, findScssFiles_1.default)(project).forEach((scssFile) => {
        const entryName = project.assetsDir
            .relative(scssFile)
            .asNative.replace(/\.scss$/i, '');
        entryPoints[entryName] = {
            import: scssFile.asNative,
        };
    });
    return entryPoints;
}
