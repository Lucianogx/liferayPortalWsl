"use strict";
/**
 * SPDX-FileCopyrightText: Â© 2021 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: LGPL-3.0-or-later
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const js_toolkit_core_1 = require("@liferay/js-toolkit-core");
const fs_1 = __importDefault(require("fs"));
const globby_1 = __importDefault(require("globby"));
const jszip_1 = __importDefault(require("jszip"));
const path_1 = __importDefault(require("path"));
async function makeZip(project, type, typeSettings) {
    const configurationPid = 'com.liferay.client.extension.type.configuration.CETConfiguration~' +
        project.pkgJson.name;
    const typeSettingsArray = Object.entries(typeSettings).reduce((array, [key, value]) => {
        if (Array.isArray(value)) {
            value = value.join('\n');
        }
        array.push(`${key}=${value}`);
        return array;
    }, []);
    const clientExtensionConfigJson = {
        [configurationPid]: {
            baseURL: `\${portalURL}/o/${project.pkgJson.name}`,
            description: project.pkgJson.description || '',
            name: project.pkgJson.name,
            sourceCodeURL: '',
            type,
            typeSettings: typeSettingsArray,
        },
    };
    const zip = new jszip_1.default();
    zip.file(`${project.pkgJson.name}.client-extension-config.json`, JSON.stringify(clientExtensionConfigJson, null, '\t'));
    addFiles(project.build.dir.asNative, ['**/*', '!manifest.json'], zip.folder('static'));
    const buffer = await zip.generateAsync({
        compression: 'DEFLATE',
        compressionOptions: {
            level: 6,
        },
        type: 'nodebuffer',
    });
    fs_1.default.mkdirSync(project.dist.dir.asNative, { recursive: true });
    fs_1.default.writeFileSync(project.dist.file.asNative, buffer);
}
exports.default = makeZip;
/**
 * Add several files to a ZIP folder.
 * @param srcDirPath source folder
 * @param srcGlobs array of globs describing files to include (in globby, i.e.
 *			POSIX, format)
 * @param destFolder the destination folder in the ZIP file
 */
function addFiles(srcDirPath, srcGlobs, destFolder) {
    const filePaths = globby_1.default
        .sync(srcGlobs, {
        cwd: srcDirPath,
        expandDirectories: false,
    })
        .map((posixPath) => new js_toolkit_core_1.FilePath(posixPath, { posix: true }))
        .map((file) => file.asNative);
    filePaths.forEach((filePath) => {
        const parts = filePath.split(path_1.default.sep);
        const dirs = parts.slice(0, parts.length - 1);
        const name = parts[parts.length - 1];
        const folder = dirs.reduce((folder, dir) => folder.folder(dir), destFolder);
        folder.file(name, fs_1.default.readFileSync(path_1.default.join(srcDirPath, filePath)));
    });
}
