"use strict";
/**
 * SPDX-FileCopyrightText: Â© 2021 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: LGPL-3.0-or-later
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const js_toolkit_core_1 = require("@liferay/js-toolkit-core");
const fs_1 = __importDefault(require("fs"));
const resolve_1 = require("resolve");
const sass_1 = __importDefault(require("sass"));
const abort_1 = __importDefault(require("./abort"));
const findFiles_1 = __importDefault(require("./findFiles"));
const { info, print } = js_toolkit_core_1.format;
function runSass(project) {
    if (!project.srcDir) {
        return;
    }
    const options = project.build.options;
    const scssFiles = (0, findFiles_1.default)(project.srcDir, (dirent) => {
        const lowerCaseName = dirent.name.toLowerCase();
        return (lowerCaseName.endsWith('.scss') && !lowerCaseName.startsWith('_'));
    });
    print(info `Running {sass} on ${scssFiles.length} asset files...`);
    const cssFiles = [];
    scssFiles.forEach((scssFile) => {
        const assetsDirRelScssFile = project.srcDir.relative(scssFile);
        const outFile = project.build.dir.join(assetsDirRelScssFile.asNative.replace(/\.scss$/, '.css'));
        cssFiles.push(outFile);
        try {
            const { css, map } = sass_1.default.renderSync({
                file: scssFile.asNative,
                importer: sassImporter,
                outFile: outFile.asNative,
                outputStyle: options.minify ? 'compressed' : 'expanded',
                sourceMap: true,
            });
            fs_1.default.mkdirSync(outFile.dirname().asNative, { recursive: true });
            fs_1.default.writeFileSync(outFile.asNative, css, 'utf8');
            fs_1.default.writeFileSync(`${outFile.asNative}.map`, map, 'utf8');
        }
        catch (error) {
            (0, abort_1.default)(error);
        }
    });
    return cssFiles;
}
exports.default = runSass;
function sassImporter(url) {
    const importDir = new js_toolkit_core_1.FilePath(this.options.file).dirname();
    let targetFile = tryImport(url, (file) => {
        const candidateFile = importDir.join(file);
        if (fs_1.default.existsSync(candidateFile.asNative)) {
            return candidateFile.asNative;
        }
    });
    if (!targetFile) {
        if (url.includes('/')) {
            targetFile = tryImport(url, (file) => sassResolve(file.asPosix));
        }
        else {
            const resolvedPath = sassResolve(url);
            if (resolvedPath) {
                targetFile = new js_toolkit_core_1.FilePath(resolvedPath);
            }
        }
    }
    if (!targetFile) {
        targetFile = new js_toolkit_core_1.FilePath(url, { posix: true });
    }
    return { file: targetFile.asNative };
}
function sassResolve(module) {
    try {
        if (module.includes('/')) {
            return (0, resolve_1.sync)(module, { basedir: '.' });
        }
        else {
            const resolvedPath = (0, resolve_1.sync)(module + '/package.json', {
                basedir: '.',
            });
            if (!resolvedPath) {
                return undefined;
            }
            /* eslint-disable-next-line */
            const packageJson = require(resolvedPath);
            const entryPoint = packageJson.style || packageJson.main;
            return (0, resolve_1.sync)(module + '/' + entryPoint, { basedir: '.' });
        }
    }
    catch (error) {
        return undefined;
    }
}
function tryImport(url, resolve) {
    const importFile = new js_toolkit_core_1.FilePath(url, { posix: true });
    for (const prefix of ['', '_']) {
        for (const extension of ['.scss', '.sass', '.css']) {
            const candidateFile = importFile
                .dirname()
                .join(prefix + importFile.basename() + extension);
            const resolvedPath = resolve(candidateFile);
            if (resolvedPath) {
                return new js_toolkit_core_1.FilePath(resolvedPath);
            }
        }
    }
}
