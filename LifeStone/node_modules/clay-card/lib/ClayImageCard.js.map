{"version":3,"sources":["../src/ClayImageCard.js"],"names":["ClayImageCard","event","emit","ClayComponent","STATE","actionAriaLabel","Config","string","actionItems","actionItemsValidator","aspectRatioClasses","value","data","object","defaultEventHandler","disabled","bool","elementClasses","href","icon","id","imageAlt","imageSrc","inputName","inputValue","labels","arrayOf","oneOfType","shapeOf","label","style","oneOf","labelStylesMap","selectable","selected","spritemap","stickerClasses","stickerIcon","stickerImageAlt","stickerImageSrc","stickerLabel","stickerStyle","stickerShape","subtitle","title","required","Soy","register","templates"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;AAEA;;;;AACA;;;;;;;;;;;;AAEA;;;;IAIMA,a;;;;;;;;;;;;AACL;;;;;;2CAMyBC,K,EAAO;AAC/B,UAAO,CAAC,KAAKC,IAAL,CAAU,aAAV,EAAyBD,KAAzB,CAAR;AACA;;AAED;;;;;;;;;qCAMmBA,K,EAAO;AACzB,UAAO,CAAC,KAAKC,IAAL,CAAU,aAAV,EAAyBD,KAAzB,CAAR;AACA;;;;EAnB0BE,uB;;AAsB5B;;;;;;;AAKAH,cAAcI,KAAd,GAAsB;AACrB;;;;;;;AAOAC,kBAAiBC,mBAAOC,MAAP,EARI;;AAUrB;;;;;;;AAOAC,cAAaC,gCAjBQ;;AAmBrB;;;;;;;AAOAC,qBAAoBJ,mBAAOC,MAAP,GAAgBI,KAAhB,CACnB,yDADmB,CA1BC;;AA8BrB;;;;;;;AAOAC,OAAMN,mBAAOO,MAAP,EArCe;;AAuCrB;;;;;;;;AAQAC,sBAAqBR,mBAAOO,MAAP,EA/CA;;AAiDrB;;;;;;;AAOAE,WAAUT,mBAAOU,IAAP,GAAcL,KAAd,CAAoB,KAApB,CAxDW;;AA0DrB;;;;;;;AAOAM,iBAAgBX,mBAAOC,MAAP,EAjEK;;AAmErB;;;;;;;AAOAW,OAAMZ,mBAAOC,MAAP,EA1Ee;;AA4ErB;;;;;;;AAOAY,OAAMb,mBAAOC,MAAP,EAnFe;;AAqFrB;;;;;;;AAOAa,KAAId,mBAAOC,MAAP,EA5FiB;;AA8FrB;;;;;;;AAOAc,WAAUf,mBAAOC,MAAP,EArGW;;AAuGrB;;;;;;;AAOAe,WAAUhB,mBAAOC,MAAP,EA9GW;;AAgHrB;;;;;;;AAOAgB,YAAWjB,mBAAOC,MAAP,EAvHU;;AAyHrB;;;;;;;AAOAiB,aAAYlB,mBAAOC,MAAP,EAhIS;;AAkIrB;;;;;;;AAOAkB,SAAQnB,mBAAOoB,OAAP,CACPpB,mBAAOqB,SAAP,CAAiB,CAChBrB,mBAAOC,MAAP,EADgB,EAEhBD,mBAAOsB,OAAP,CAAe;AACdC,SAAOvB,mBAAOC,MAAP,EADO;AAEduB,SAAOxB,mBAAOyB,KAAP,CAAa,CACnB,QADmB,EAEnB,MAFmB,EAGnB,WAHmB,EAInB,SAJmB,EAKnB,SALmB,CAAb,EAMJpB,KANI,CAME,WANF;AAFO,EAAf,CAFgB,CAAjB,CADO,CAzIa;;AAyJrB;;;;;;;AAOAqB,iBAAgB1B,mBAAOO,MAAP,EAhKK;;AAkKrB;;;;;;;AAOAoB,aAAY3B,mBAAOU,IAAP,GAAcL,KAAd,CAAoB,KAApB,CAzKS;;AA2KrB;;;;;;;AAOAuB,WAAU5B,mBAAOU,IAAP,GAAcL,KAAd,CAAoB,KAApB,CAlLW;;AAoLrB;;;;;;;AAOAwB,YAAW7B,mBAAOC,MAAP,EA3LU;;AA6LrB;;;;;;;AAOA6B,iBAAgB9B,mBAAOC,MAAP,EApMK;;AAsMrB;;;;;;;AAOA8B,cAAa/B,mBAAOC,MAAP,EA7MQ;;AA+MrB;;;;;;;AAOA+B,kBAAiBhC,mBAAOC,MAAP,EAtNI;;AAwNrB;;;;;;;AAOAgC,kBAAiBjC,mBAAOC,MAAP,EA/NI;;AAiOrB;;;;;;;AAOAiC,eAAclC,mBAAOC,MAAP,EAxOO;;AA0OrB;;;;;;;AAOAkC,eAAcnC,mBAAOyB,KAAP,CAAa,CAC1B,QAD0B,EAE1B,MAF0B,EAG1B,MAH0B,EAI1B,OAJ0B,EAK1B,SAL0B,EAM1B,WAN0B,EAO1B,SAP0B,EAQ1B,SAR0B,CAAb,EASXpB,KATW,CASL,SATK,CAjPO;;AA4PrB;;;;;;;AAOA+B,eAAcpC,mBAAOyB,KAAP,CAAa,CAAC,QAAD,EAAW,SAAX,CAAb,EAAoCpB,KAApC,CAA0C,SAA1C,CAnQO;;AAqQrB;;;;;;;AAOAgC,WAAUrC,mBAAOC,MAAP,EA5QW;;AA8QrB;;;;;;;AAOAqC,QAAOtC,mBAAOC,MAAP,GAAgBsC,QAAhB;AArRc,CAAtB;;AAwRA,iCAAmB,iBAAnB,EAAsC7C,aAAtC;;AAEA8C,mBAAIC,QAAJ,CAAa/C,aAAb,EAA4BgD,0BAA5B;;QAEQhD,a,GAAAA,a;kBACOA,a","file":"ClayImageCard.js","sourcesContent":["import 'clay-icon';\nimport 'clay-sticker';\nimport './ClayCardBase';\nimport ClayComponent from 'clay-component';\nimport defineWebComponent from 'metal-web-component';\nimport Soy from 'metal-soy';\nimport {Config} from 'metal-state';\n\nimport actionItemsValidator from './action_items_validator';\nimport templates from './ClayImageCard.soy.js';\n\n/**\n * Metal ClayImageCard component.\n * @extends ClayComponent\n */\nclass ClayImageCard extends ClayComponent {\n\t/**\n\t * Continues the propagation of the dropdown action item click event\n\t * @param {!Event} event\n\t * @private\n\t * @return {Boolean} If the event has been prevented or not.\n\t */\n\t_handleActionItemClicked(event) {\n\t\treturn !this.emit('itemClicked', event);\n\t}\n\n\t/**\n\t * Continues the propagation of the checkbox changed event\n\t * @param {!Event} event\n\t * @private\n\t * @return {Boolean} If the event has been prevented or not.\n\t */\n\t_handleItemToggled(event) {\n\t\treturn !this.emit('itemToggled', event);\n\t}\n}\n\n/**\n * State definition.\n * @static\n * @type {!Object}\n */\nClayImageCard.STATE = {\n\t/**\n\t * Aria label attribute for the action element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayImageCard\n\t * @type {?(string|undefined)}\n\t */\n\tactionAriaLabel: Config.string(),\n\n\t/**\n\t * List of items to display in the actions menu.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayImageCard\n\t * @type {?(array|object|undefined)}\n\t */\n\tactionItems: actionItemsValidator,\n\n\t/**\n\t * CSS classes for the aspect ratio images\n\t * @default aspect-ratio-item-center-middle aspect-ratio-item-fluid\n\t * @instance\n\t * @memberof ClayImageCard\n\t * @type {?(string|undefined)}\n\t */\n\taspectRatioClasses: Config.string().value(\n\t\t'aspect-ratio-item-center-middle aspect-ratio-item-fluid'\n\t),\n\n\t/**\n\t * Data to add to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayImageCard\n\t * @type {?object}\n\t */\n\tdata: Config.object(),\n\n\t/**\n\t * Object that wires events with default listeners\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayImageCard\n\t * @review\n\t * @type {?(object|undefined)}\n\t */\n\tdefaultEventHandler: Config.object(),\n\n\t/**\n\t * Flag to indicate if the card is disabled or not.\n\t * @default false\n\t * @instance\n\t * @memberof ClayImageCard\n\t * @type {?bool}\n\t */\n\tdisabled: Config.bool().value(false),\n\n\t/**\n\t * CSS classes to be applied to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayImageCard\n\t * @type {?(string|undefined)}\n\t */\n\telementClasses: Config.string(),\n\n\t/**\n\t * Url to be applied to the title of the card.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayImageCard\n\t * @type {?(string|undefined)}\n\t */\n\thref: Config.string(),\n\n\t/**\n\t * Icon to be rendered in the visual area of the card.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayImageCard\n\t * @type {?(string|undefined)}\n\t */\n\ticon: Config.string(),\n\n\t/**\n\t * Id to be applied to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayImageCard\n\t * @type {?(string|undefined)}\n\t */\n\tid: Config.string(),\n\n\t/**\n\t * Alternate text of the image.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayImageCard\n\t * @type {?(string|undefined)}\n\t */\n\timageAlt: Config.string(),\n\n\t/**\n\t * Source of the image to be rendered in the visual area of the card.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayImageCard\n\t * @type {?(string|undefined)}\n\t */\n\timageSrc: Config.string(),\n\n\t/**\n\t * Name to be applied to the input element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayImageCard\n\t * @type {?(string|undefined)}\n\t */\n\tinputName: Config.string(),\n\n\t/**\n\t * Value to be applied to the input element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayImageCard\n\t * @type {?(string|undefined)}\n\t */\n\tinputValue: Config.string(),\n\n\t/**\n\t * Labels of the card.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayImageCard\n\t * @type {?(array|undefined)}\n\t */\n\tlabels: Config.arrayOf(\n\t\tConfig.oneOfType([\n\t\t\tConfig.string(),\n\t\t\tConfig.shapeOf({\n\t\t\t\tlabel: Config.string(),\n\t\t\t\tstyle: Config.oneOf([\n\t\t\t\t\t'danger',\n\t\t\t\t\t'info',\n\t\t\t\t\t'secondary',\n\t\t\t\t\t'success',\n\t\t\t\t\t'warning',\n\t\t\t\t]).value('secondary'),\n\t\t\t}),\n\t\t])\n\t),\n\n\t/**\n\t * Object that maps specific label values with desired styles.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayImageCard\n\t * @type {?(object|undefined)}\n\t */\n\tlabelStylesMap: Config.object(),\n\n\t/**\n\t * Flag to indicate if the card is selectable or not.\n\t * @default false\n\t * @instance\n\t * @memberof ClayImageCard\n\t * @type {?bool}\n\t */\n\tselectable: Config.bool().value(false),\n\n\t/**\n\t * Flag to indicate if the card is selected or not.\n\t * @default false\n\t * @instance\n\t * @memberof ClayImageCard\n\t * @type {?bool}\n\t */\n\tselected: Config.bool().value(false),\n\n\t/**\n\t * The path to the SVG spritemap file containing the icons.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayImageCard\n\t * @type {?(string|undefined)}\n\t */\n\tspritemap: Config.string(),\n\n\t/**\n\t * CSS classes for the inside the sticker.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayImageCard\n\t * @type {?(string|undefined)}\n\t */\n\tstickerClasses: Config.string(),\n\n\t/**\n\t * Icon to be renderer inside the sticker.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayImageCard\n\t * @type {?(string|undefined)}\n\t */\n\tstickerIcon: Config.string(),\n\n\t/**\n\t * Alternate text of the image to be renderer inside the sticker.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayImageCard\n\t * @type {?(string|undefined)}\n\t */\n\tstickerImageAlt: Config.string(),\n\n\t/**\n\t * Source of the image to be rendered inside the sticker.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayImageCard\n\t * @type {?(string|undefined)}\n\t */\n\tstickerImageSrc: Config.string(),\n\n\t/**\n\t * Label for the sticker represented in the card.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayImageCard\n\t * @type {?(string|undefined)}\n\t */\n\tstickerLabel: Config.string(),\n\n\t/**\n\t * Style of sticker represented in the card.\n\t * @default primary\n\t * @instance\n\t * @memberof ClayImageCard\n\t * @type {?string}\n\t */\n\tstickerStyle: Config.oneOf([\n\t\t'danger',\n\t\t'dark',\n\t\t'info',\n\t\t'light',\n\t\t'primary',\n\t\t'secondary',\n\t\t'success',\n\t\t'warning',\n\t]).value('primary'),\n\n\t/**\n\t * Shape for the sticker represented in the card.\n\t * @default rounded\n\t * @instance\n\t * @memberof ClayImageCard\n\t * @type {?string}\n\t */\n\tstickerShape: Config.oneOf(['circle', 'rounded']).value('rounded'),\n\n\t/**\n\t * Subtitle of the card.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayImageCard\n\t * @type {?(string|undefined)}\n\t */\n\tsubtitle: Config.string(),\n\n\t/**\n\t * Title of the card.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayImageCard\n\t * @type {!string}\n\t */\n\ttitle: Config.string().required(),\n};\n\ndefineWebComponent('clay-image-card', ClayImageCard);\n\nSoy.register(ClayImageCard, templates);\n\nexport {ClayImageCard};\nexport default ClayImageCard;\n"]}