{"version":3,"sources":["../src/ClayDataProvider.js"],"names":["ClayDataProvider","_isResolvedData","_loadingTimeout","_pollingInterval","_requestsCount","_hasData","dataSource","_dataSource","updateData","inputMode","bind","debounceTime","addListener","_defaultDataChange","_defaultDataError","_defaultDataLoading","clearInterval","query","requestRetries","initialData","_handleDataChange","_handleDataLoading","promise","fetch","requestOptions","then","res","json","requestTimeout","_setPolling","catch","_setRequestRetries","err","isLoading","isError","clearTimeout","event","requestsCount","data","delayLoading","setTimeout","delayLoadingTimer","emit","name","Array","isArray","pollingInterval","setInterval","_fetchData","isDisposed","console","error","_handleDataError","param","extract","elem","reduce","prev","element","index","string","_performCall","result","length","matches","values","score","value","sort","a","b","ClayComponent","STATE","Config","oneOfType","array","func","object","internal","content","required","number","bool","errorContent","any","oneOf","loadingContent","shapeOf","body","cache","credentials","headers","method","mode","redirect","referrer","requestPolling","validator","warn","Soy","register","templates"],"mappings":"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","file":"ClayDataProvider.js","sourcesContent":["import {cancelDebounce, debounce} from 'metal-debounce';\nimport {Config} from 'metal-state';\nimport {isObject, isFunction} from 'metal';\nimport {match, timeout} from './utils';\nimport ClayComponent from 'clay-component';\nimport defineWebComponent from 'metal-web-component';\nimport Soy from 'metal-soy';\n\nimport templates from './ClayDataProvider.soy.js';\n\n/**\n * Metal ClayDataProvider component.\n * @extends ClayComponent\n */\nclass ClayDataProvider extends ClayComponent {\n\t/**\n\t * @inheritDoc\n\t */\n\tcreated() {\n\t\tthis._isResolvedData = false;\n\t\tthis._loadingTimeout = null;\n\t\tthis._pollingInterval = 0;\n\t\tthis._requestsCount = 0;\n\t\tif (this._hasData(this.dataSource)) {\n\t\t\tthis._dataSource = this.dataSource;\n\t\t\tthis._isResolvedData = true;\n\t\t} else {\n\t\t\tthis.updateData();\n\t\t}\n\n\t\tif (this.inputMode === 'userInput') {\n\t\t\tthis.updateData = debounce(\n\t\t\t\tthis.updateData.bind(this),\n\t\t\t\tthis.debounceTime\n\t\t\t);\n\t\t}\n\n\t\tthis.addListener('dataChange', this._defaultDataChange, true);\n\t\tthis.addListener('dataError', this._defaultDataError, true);\n\t\tthis.addListener('dataLoading', this._defaultDataLoading, true);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposed() {\n\t\tif (this._pollingInterval) {\n\t\t\tclearInterval(this._pollingInterval);\n\t\t\tthis._pollingInterval = null;\n\t\t}\n\n\t\tcancelDebounce(this.updateData);\n\t}\n\n\t/**\n\t * Makes the request and defines initial data while it is requesting.\n\t * @param {!string} query\n\t * @param {!number} requestRetries\n\t * @protected\n\t */\n\tupdateData(query, requestRetries = 0) {\n\t\tthis._isResolvedData = false;\n\n\t\tif (\n\t\t\tthis.initialData &&\n\t\t\t!this._pollingInterval &&\n\t\t\trequestRetries === 0\n\t\t) {\n\t\t\tthis._dataSource = this.initialData;\n\t\t\tthis._handleDataChange();\n\t\t} else {\n\t\t\tthis._handleDataLoading();\n\t\t}\n\n\t\tlet promise;\n\n\t\tif (isFunction(this.dataSource)) {\n\t\t\tpromise = this.dataSource(query);\n\t\t} else {\n\t\t\tpromise = fetch(this.dataSource, this.requestOptions).then(res =>\n\t\t\t\tres.json()\n\t\t\t);\n\t\t}\n\n\t\ttimeout(this.requestTimeout, promise)\n\t\t\t.then(res => {\n\t\t\t\tthis._dataSource = res;\n\t\t\t\tthis._requestsCount += 1;\n\t\t\t\tthis._isResolvedData = true;\n\t\t\t\tthis._handleDataChange();\n\n\t\t\t\tif (this.inputMode === 'polling') {\n\t\t\t\t\tthis._setPolling();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(err => this._setRequestRetries(query, err, requestRetries));\n\t}\n\n\t/**\n\t * @protected\n\t */\n\t_defaultDataChange() {\n\t\tthis.isLoading = false;\n\t\tthis.isError = false;\n\n\t\tif (this._requestsCount > 0) {\n\t\t\tclearTimeout(this._loadingTimeout);\n\t\t}\n\t}\n\n\t/**\n\t * @protected\n\t */\n\t_defaultDataError() {\n\t\tthis.isError = true;\n\t\tthis.isLoading = false;\n\t}\n\n\t/**\n\t * @param {!Event} event\n\t * @protected\n\t */\n\t_defaultDataLoading(event) {\n\t\tconst {requestsCount} = event.data;\n\n\t\tthis.isError = false;\n\n\t\tif (requestsCount > 0 && this.delayLoading) {\n\t\t\tthis._loadingTimeout = setTimeout(() => {\n\t\t\t\tif (!this._isResolvedData) {\n\t\t\t\t\tthis.isLoading = true;\n\t\t\t\t}\n\t\t\t}, this.delayLoadingTimer);\n\t\t} else {\n\t\t\tthis.isLoading = true;\n\t\t}\n\t}\n\n\t/**\n\t * Handles the event when data changed.\n\t * @protected\n\t * @return {Boolean} If the event has been prevented or not.\n\t */\n\t_handleDataChange() {\n\t\treturn !this.emit({\n\t\t\tdata: this._dataSource,\n\t\t\tname: 'dataChange',\n\t\t});\n\t}\n\n\t/**\n\t * Handles the event when request error\n\t * @param {!Error} err\n\t * @protected\n\t * @return {Boolean} If the event has been prevented or not.\n\t */\n\t_handleDataError(err) {\n\t\treturn !this.emit({\n\t\t\tdata: err,\n\t\t\tname: 'dataError',\n\t\t});\n\t}\n\n\t/**\n\t * Handle triggering the event of loading data\n\t * @protected\n\t * @return {Boolean} If the event has been prevented or not.\n\t */\n\t_handleDataLoading() {\n\t\treturn !this.emit({\n\t\t\tdata: {\n\t\t\t\trequestsCount: this._requestsCount,\n\t\t\t},\n\t\t\tname: 'dataLoading',\n\t\t});\n\t}\n\n\t/**\n\t * Checks whether the data is locally.\n\t * @param {!(string|object|array)} data\n\t * @return {Boolean}\n\t */\n\t_hasData(data) {\n\t\tif (Array.isArray(data) || isObject(data)) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Sets up the polling interval.\n\t * @protected\n\t */\n\t_setPolling() {\n\t\tif (this.pollingInterval > 0) {\n\t\t\tif (this._pollingInterval) {\n\t\t\t\tclearInterval(this._pollingInterval);\n\t\t\t}\n\n\t\t\tthis._pollingInterval = setInterval(() => {\n\t\t\t\tthis._isResolvedData = false;\n\t\t\t\tthis._fetchData();\n\t\t\t}, this.pollingInterval);\n\t\t}\n\t}\n\n\t/**\n\t * Sets up the request retries.\n\t * @param {!string} query\n\t * @param {!string} err\n\t * @param {!number} requestRetries\n\t * @protected\n\t */\n\t_setRequestRetries(query, err, requestRetries) {\n\t\tif (this.isDisposed()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.requestRetries > 0 && requestRetries < this.requestRetries) {\n\t\t\tconsole.error(\n\t\t\t\t`DataProvider: (${requestRetries + 1}/${\n\t\t\t\t\tthis.requestRetries\n\t\t\t\t}) Request attempt failed`,\n\t\t\t\terr\n\t\t\t);\n\n\t\t\tthis.updateData(query, requestRetries + 1);\n\t\t} else {\n\t\t\tconsole.error('DataProvider: Error making the requisition', err);\n\t\t\tthis._handleDataError(err);\n\t\t}\n\t}\n\n\t/**\n\t * Handles data mapping.\n\t * @param {!(function|string)} param\n\t * @param {!Array} data\n\t * @protected\n\t * @return {!(string|number)}\n\t */\n\t_performCall(param, data) {\n\t\tif (typeof param === 'function') {\n\t\t\treturn param(data);\n\t\t}\n\n\t\tif (typeof data === 'string') {\n\t\t\treturn data;\n\t\t}\n\n\t\treturn data[param];\n\t}\n\n\t/**\n\t * Helper method to filter a list based on a string.\n\t * @param {!string} query\n\t * @param {?(function|string)} extract\n\t * @public\n\t * @return {Array} A list of items containing the corresponding characters\n\t */\n\tfilter(query, extract = elem => elem) {\n\t\tif (!this._isResolvedData) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn this._dataSource\n\t\t\t.reduce((prev, element, index) => {\n\t\t\t\tlet string = this._performCall(extract, element);\n\t\t\t\tlet result = match(query, string);\n\n\t\t\t\tif (result != null) {\n\t\t\t\t\tprev[prev.length] = {\n\t\t\t\t\t\tdata: element,\n\t\t\t\t\t\tindex,\n\t\t\t\t\t\tmatches: result.values,\n\t\t\t\t\t\tscore: result.score,\n\t\t\t\t\t\tvalue: string,\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\treturn prev;\n\t\t\t}, [])\n\t\t\t.sort((a, b) => {\n\t\t\t\tif (a > b) return 1;\n\t\t\t\tif (a < b) return -1;\n\t\t\t});\n\t}\n}\n\n/**\n * State definition.\n * @static\n * @type {!Object}\n */\nClayDataProvider.STATE = {\n\t/**\n\t * The array or object of items for internal manipulation\n\t * @instance\n\t * @default undefined\n\t * @memberof ClayDataProvider\n\t * @type {?(object|array)}\n\t */\n\t_dataSource: Config.oneOfType([\n\t\tConfig.array(),\n\t\tConfig.func(),\n\t\tConfig.object(),\n\t]).internal(),\n\n\t/**\n\t * The content renderer.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayDataProvider\n\t * @type {!html}\n\t */\n\tcontent: Config.required(),\n\n\t/**\n\t * Data to add to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayDataProvider\n\t * @type {?object}\n\t */\n\tdata: Config.object(),\n\n\t/**\n\t * The array of data items that the data source contains,\n\t * the URL for the data provider to request, or a function\n\t * that receives the query and returns a promise with the\n\t * elements.\n\t *\n\t * @instance\n\t * @default undefined\n\t * @memberof ClayDataProvider\n\t * @type {!(string|object|array|function)}\n\t */\n\tdataSource: Config.oneOfType([\n\t\tConfig.array(),\n\t\tConfig.func(),\n\t\tConfig.object(),\n\t\tConfig.string(),\n\t]).required(),\n\n\t/**\n\t * Set the request debounce time\n\t * @instance\n\t * @default 200\n\t * @memberof ClayDataProvider\n\t * @type {?number}\n\t */\n\tdebounceTime: Config.number().value(200),\n\n\t/**\n\t * @default false\n\t * @instance\n\t * @memberof ClayDataProvider\n\t * @type {?number}\n\t */\n\tdelayLoading: Config.bool().value(false),\n\n\t/**\n\t * @default 500\n\t * @instance\n\t * @memberof ClayDataProvider\n\t * @type {?number}\n\t */\n\tdelayLoadingTimer: Config.number().value(500),\n\n\t/**\n\t * The error content renderer.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayDataProvider\n\t * @type {!html}\n\t */\n\terrorContent: Config.any(),\n\n\t/**\n\t * Set some initial data while the first request is being made\n\t * @instance\n\t * @default undefined\n\t * @memberof ClayDataProvider\n\t * @type {?(object|array)}\n\t */\n\tinitialData: Config.oneOfType([Config.array(), Config.object()]),\n\n\t/**\n\t * Specifies explicitly if request needs to be made with debounce\n\t * (userInput) or with polling (polling)\n\t * @instance\n\t * @default undefined\n\t * @memberof ClayDataProvider\n\t * @type {?(object|array)}\n\t */\n\tinputMode: Config.oneOf(['polling', 'userInput']).value('userInput'),\n\n\t/**\n\t * @default false\n\t * @instance\n\t * @memberof ClayDataProvider\n\t * @type {?bool}\n\t */\n\tisError: Config.bool()\n\t\t.value(false)\n\t\t.internal(),\n\n\t/**\n\t * Flag to indicate the render state. true will\n\t * render the contents of loadingContent.\n\t * @default false\n\t * @instance\n\t * @memberof ClayDataProvider\n\t * @type {?bool}\n\t */\n\tisLoading: Config.bool()\n\t\t.value(false)\n\t\t.internal(),\n\n\t/**\n\t * The loading content renderer.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayDataProvider\n\t * @type {!html}\n\t */\n\tloadingContent: Config.any(),\n\n\t/**\n\t * Flag to define how often to refetch data (ms)\n\t * @instance\n\t * @default 0\n\t * @memberof ClayDataProvider\n\t * @type {?(number|undefined)}\n\t */\n\tpollingInterval: Config.number().value(0),\n\n\t/**\n\t * Set ups the request options\n\t * @instance\n\t * @default undefined\n\t * @memberof ClayDataProvider\n\t * @type {?(object|undefined)}\n\t */\n\trequestOptions: Config.shapeOf({\n\t\tbody: Config.object(),\n\t\tcache: Config.string(),\n\t\tcredentials: Config.string(),\n\t\theaders: Config.object(),\n\t\tmethod: Config.string(),\n\t\tmode: Config.string(),\n\t\tredirect: Config.string(),\n\t\treferrer: Config.string(),\n\t}),\n\n\t/**\n\t * Flag to define how often to refetch data (ms)\n\t * @instance\n\t * @default 0\n\t * @memberof ClayDataProvider\n\t * @type {?(number|undefined)}\n\t */\n\trequestPolling: Config.validator(value => {\n\t\tif (value) {\n\t\t\tconsole.warn(\n\t\t\t\t'🚨 `requestPolling` has been renamed to `pollingInterval` and will be deprecated and removed in the next release.'\n\t\t\t);\n\t\t}\n\t}),\n\n\t/**\n\t * Define how many attempts will be made when the request fails\n\t * @instance\n\t * @default 5\n\t * @memberof ClayDataProvider\n\t * @type {?(number|undefined)}\n\t */\n\trequestRetries: Config.number().value(5),\n\n\t/**\n\t * Set timeout of the request\n\t * @instance\n\t * @default 30000\n\t * @memberof ClayDataProvider\n\t * @type {?(number|undefined)}\n\t */\n\trequestTimeout: Config.number().value(30000),\n};\n\ndefineWebComponent('clay-data-provider', ClayDataProvider);\n\nSoy.register(ClayDataProvider, templates);\n\nexport {ClayDataProvider};\nexport default ClayDataProvider;\n"]}