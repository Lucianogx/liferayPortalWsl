'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.ClayLoadingIndicator = undefined;

var _clayComponent = require('clay-component');

var _clayComponent2 = _interopRequireDefault(_clayComponent);

var _metalWebComponent = require('metal-web-component');

var _metalWebComponent2 = _interopRequireDefault(_metalWebComponent);

var _metalSoy = require('metal-soy');

var _metalSoy2 = _interopRequireDefault(_metalSoy);

var _metalState = require('metal-state');

var _ClayLoadingIndicatorSoy = require('./ClayLoadingIndicator.soy.js');

var _ClayLoadingIndicatorSoy2 = _interopRequireDefault(_ClayLoadingIndicatorSoy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Implementation of the Clay loading indicator
 * @extends ClayComponent
 */
var ClayLoadingIndicator = function (_ClayComponent) {
	_inherits(ClayLoadingIndicator, _ClayComponent);

	function ClayLoadingIndicator() {
		_classCallCheck(this, ClayLoadingIndicator);

		return _possibleConstructorReturn(this, (ClayLoadingIndicator.__proto__ || Object.getPrototypeOf(ClayLoadingIndicator)).apply(this, arguments));
	}

	return ClayLoadingIndicator;
}(_clayComponent2.default);

/**
 * State definition.
 * @static
 * @type {!Object}
 */


ClayLoadingIndicator.STATE = {
	/**
  * Data to add to the element.
  * @default undefined
  * @instance
  * @memberof ClayLoadingIndicator
  * @type {?object}
  */
	data: _metalState.Config.object(),

	/**
  * Object that wires events with default listeners
  * @default undefined
  * @instance
  * @memberof ClayLoadingIndicator
  * @review
  * @type {?(object|undefined)}
  */
	defaultEventHandler: _metalState.Config.object(),

	/**
  * CSS classes to be applied to the element.
  * @default undefined
  * @instance
  * @memberof ClayLoadingIndicator
  * @type {?(string|undefined)}
  */
	elementClasses: _metalState.Config.string(),

	/**
  * Flag to indicate if indicator should be light colored
  * @default false
  * @instance
  * @memberof ClayLoadingIndicator
  * @type {?bool}
  */
	light: _metalState.Config.bool().value(false),

	/**
  * Flag to indicate if the indicator should be small
  * @default false
  * @instance
  * @memberof ClayLoadingIndicator
  * @type {?bool}
  */
	small: _metalState.Config.bool().value(false)
};

(0, _metalWebComponent2.default)('clay-loading-indicator', ClayLoadingIndicator);

_metalSoy2.default.register(ClayLoadingIndicator, _ClayLoadingIndicatorSoy2.default);

exports.ClayLoadingIndicator = ClayLoadingIndicator;
exports.default = ClayLoadingIndicator;
//# sourceMappingURL=ClayLoadingIndicator.js.map