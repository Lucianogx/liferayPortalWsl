{"version":3,"sources":["../src/ClayLoadingIndicator.js"],"names":["ClayLoadingIndicator","ClayComponent","STATE","data","Config","object","defaultEventHandler","elementClasses","string","light","bool","value","small","Soy","register","templates"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AAEA;;;;;;;;;;;;AAEA;;;;IAIMA,oB;;;;;;;;;;EAA6BC,uB;;AAEnC;;;;;;;AAKAD,qBAAqBE,KAArB,GAA6B;AAC5B;;;;;;;AAOAC,OAAMC,mBAAOC,MAAP,EARsB;;AAU5B;;;;;;;;AAQAC,sBAAqBF,mBAAOC,MAAP,EAlBO;;AAoB5B;;;;;;;AAOAE,iBAAgBH,mBAAOI,MAAP,EA3BY;;AA6B5B;;;;;;;AAOAC,QAAOL,mBAAOM,IAAP,GAAcC,KAAd,CAAoB,KAApB,CApCqB;;AAsC5B;;;;;;;AAOAC,QAAOR,mBAAOM,IAAP,GAAcC,KAAd,CAAoB,KAApB;AA7CqB,CAA7B;;AAgDA,iCAAmB,wBAAnB,EAA6CX,oBAA7C;;AAEAa,mBAAIC,QAAJ,CAAad,oBAAb,EAAmCe,iCAAnC;;QAEQf,oB,GAAAA,oB;kBACOA,oB","file":"ClayLoadingIndicator.js","sourcesContent":["import ClayComponent from 'clay-component';\nimport defineWebComponent from 'metal-web-component';\nimport Soy from 'metal-soy';\nimport {Config} from 'metal-state';\n\nimport templates from './ClayLoadingIndicator.soy.js';\n\n/**\n * Implementation of the Clay loading indicator\n * @extends ClayComponent\n */\nclass ClayLoadingIndicator extends ClayComponent {}\n\n/**\n * State definition.\n * @static\n * @type {!Object}\n */\nClayLoadingIndicator.STATE = {\n\t/**\n\t * Data to add to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayLoadingIndicator\n\t * @type {?object}\n\t */\n\tdata: Config.object(),\n\n\t/**\n\t * Object that wires events with default listeners\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayLoadingIndicator\n\t * @review\n\t * @type {?(object|undefined)}\n\t */\n\tdefaultEventHandler: Config.object(),\n\n\t/**\n\t * CSS classes to be applied to the element.\n\t * @default undefined\n\t * @instance\n\t * @memberof ClayLoadingIndicator\n\t * @type {?(string|undefined)}\n\t */\n\telementClasses: Config.string(),\n\n\t/**\n\t * Flag to indicate if indicator should be light colored\n\t * @default false\n\t * @instance\n\t * @memberof ClayLoadingIndicator\n\t * @type {?bool}\n\t */\n\tlight: Config.bool().value(false),\n\n\t/**\n\t * Flag to indicate if the indicator should be small\n\t * @default false\n\t * @instance\n\t * @memberof ClayLoadingIndicator\n\t * @type {?bool}\n\t */\n\tsmall: Config.bool().value(false),\n};\n\ndefineWebComponent('clay-loading-indicator', ClayLoadingIndicator);\n\nSoy.register(ClayLoadingIndicator, templates);\n\nexport {ClayLoadingIndicator};\nexport default ClayLoadingIndicator;\n"]}