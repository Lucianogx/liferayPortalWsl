/* jshint ignore:start */
import Component from 'metal-component';
import Soy from 'metal-soy';

var templates;
goog.loadModule(function(exports) {
var soy = goog.require('soy');
var soydata = goog.require('soydata');
// This file was automatically generated from ClayLoadingIndicator.soy.
// Please don't edit this file by hand.

/**
 * @fileoverview Templates in namespace ClayLoadingIndicator.
 * @public
 */

goog.module('ClayLoadingIndicator.incrementaldom');

goog.require('goog.soy.data.SanitizedContent');
var incrementalDom = goog.require('incrementaldom');
goog.require('soy.asserts');
var soyIdom = goog.require('soy.idom');


/**
 * @param {{
 *  elementClasses: (!goog.soy.data.SanitizedContent|null|string|undefined),
 *  light: (boolean|null|undefined),
 *  small: (boolean|null|undefined)
 * }} opt_data
 * @param {Object<string, *>=} opt_ijData
 * @param {Object<string, *>=} opt_ijData_deprecated
 * @return {void}
 * @suppress {checkTypes}
 */
function $render(opt_data, opt_ijData, opt_ijData_deprecated) {
  opt_ijData = opt_ijData_deprecated || opt_ijData;
  opt_data = opt_data || {};
  /** @type {!goog.soy.data.SanitizedContent|null|string|undefined} */
  var elementClasses = soy.asserts.assertType(opt_data.elementClasses == null || (goog.isString(opt_data.elementClasses) || opt_data.elementClasses instanceof goog.soy.data.SanitizedContent), 'elementClasses', opt_data.elementClasses, '!goog.soy.data.SanitizedContent|null|string|undefined');
  /** @type {boolean|null|undefined} */
  var light = soy.asserts.assertType(opt_data.light == null || (goog.isBoolean(opt_data.light) || opt_data.light === 1 || opt_data.light === 0), 'light', opt_data.light, 'boolean|null|undefined');
  /** @type {boolean|null|undefined} */
  var small = soy.asserts.assertType(opt_data.small == null || (goog.isBoolean(opt_data.small) || opt_data.small === 1 || opt_data.small === 0), 'small', opt_data.small, 'boolean|null|undefined');
  var attributes__soy7 = function() {
    incrementalDom.attr('aria-hidden', 'true');
    incrementalDom.attr('class', 'loading-animation' + (light ? ' loading-animation-light' : '') + (small ? ' loading-animation-sm' : '') + (elementClasses ? ' ' + elementClasses : ''));
  };
  incrementalDom.elementOpenStart('span');
      attributes__soy7();
  incrementalDom.elementOpenEnd();
  incrementalDom.elementClose('span');
}
exports.render = $render;
/**
 * @typedef {{
 *  elementClasses: (!goog.soy.data.SanitizedContent|null|string|undefined),
 *  light: (boolean|null|undefined),
 *  small: (boolean|null|undefined)
 * }}
 */
$render.Params;
if (goog.DEBUG) {
  $render.soyTemplateName = 'ClayLoadingIndicator.render';
}

exports.render.params = ["elementClasses","light","small"];
exports.render.types = {"elementClasses":"string","light":"bool","small":"bool"};
templates = exports;
return exports;

});

class ClayLoadingIndicator extends Component {}
Soy.register(ClayLoadingIndicator, templates);
export { ClayLoadingIndicator, templates };
export default templates;
/* jshint ignore:end */
