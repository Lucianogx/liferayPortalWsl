"use strict";
/**
 * SPDX-FileCopyrightText: Â© 2020 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: LGPL-3.0-or-later
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const babel = __importStar(require("babel-core"));
const project_1 = __importDefault(require("liferay-npm-build-tools-common/lib/project"));
/**
 * @param {object} context loader's context
 * @param {object} config a .babelrc like configuration object
 * @return {string} the processed file content
 */
function default_1(context, config) {
    const { content, filePath, log, sourceMap } = context;
    const babelConfig = {
        filename: project_1.default.dir.join(filePath).asNative,
        filenameRelative: filePath,
        inputSourceMap: sourceMap,
        ...config,
    };
    // Tune babel config
    babelConfig.babelrc = false;
    babelConfig.only = '**/*';
    if (babelConfig.sourceMaps === undefined) {
        babelConfig.sourceMaps = true;
    }
    // Intercept presets and plugins to load them from project
    babelConfig.plugins = loadBabelPlugins(babelConfig.presets || [], babelConfig.plugins || []);
    delete babelConfig.presets;
    const result = babel.transform(content, babelConfig);
    context.sourceMap = result.map;
    context.extraArtifacts[`${filePath}.map`] = JSON.stringify(result.map);
    log.info('babel-loader', 'Transpiled file');
    return result.code;
}
exports.default = default_1;
/**
 * Load Babel plugins from a given array of presets and plugins.
 * @param {Array} presets an array of Babel preset names as defined by .babelrc
 * @param {Array} plugins an array of Babel plugins names as defined by .babelrc
 * @return {Array} the instantiated Babel plugins
 */
function loadBabelPlugins(presets, plugins) {
    return []
        .concat(...presets.map((preset) => {
        let presetModule;
        let presetName;
        try {
            presetName = `babel-preset-${preset}`;
            presetModule = project_1.default.require(presetName);
        }
        catch (err) {
            presetName = preset;
            presetModule = project_1.default.require(presetName);
        }
        if (presetModule === undefined) {
            throw new Error(`Babel preset '${presetName}' does not export anything`);
        }
        if (presetModule.default !== undefined) {
            presetModule = presetModule.default;
        }
        if (presetModule.plugins === undefined &&
            typeof presetModule !== 'function') {
            throw new Error(`Babel preset '${presetName}' does not export a ` +
                'valid function or plugins object');
        }
        return presetModule.plugins || presetModule().plugins;
    }))
        .concat(plugins);
}
